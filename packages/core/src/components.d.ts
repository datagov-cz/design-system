/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionSizeType, AccordionVariantType } from "./components/gov-accordion/constants";
import { AccordionEvent, AccordionItemEvent } from "./components/gov-accordion/gov-accordion.types";
import { GovBreadcrumbsChangeEvent } from "./components/gov-breadcrumbs/gov-breadcrumbs.d";
import { ButtonSizesType, ButtonTargetType, ButtonVariantType, NativeTypesType, TypesType } from "./components/gov-button/button/constants";
import { ButtonEvent } from "./components/gov-button/button/gov-button.types";
import { GovCardChangeEvent } from "./components/gov-card/interfaces";
import { NativeTypesType as NativeTypesType1 } from "./components/gov-chip/constants";
import { ControlGroupVariantType } from "./components/gov-control-group/constants";
import { PositionType } from "./components/gov-button/dropdown/constants";
import { DropdownEvent } from "./components/gov-button/dropdown/gov-dropdown.types";
import { SizesType, VariantType } from "./components/gov-form/autocomplete/constants";
import { FormAutocompleteEvent, GovFormAutocompleteItem } from "./components/gov-form/autocomplete/gov-form-autocomplete.types";
import { FormCheckboxSizesType } from "./components/gov-form/checkbox/constants";
import { FormCheckboxEvent } from "./components/gov-form/checkbox/gov-form-checkbox.types";
import { FormControlSizesType } from "./components/gov-form/control/constants";
import { GovFormFileEvent } from "./components/gov-form/file/gov-form-file.types";
import { FormGroupOrientationType, FormGroupSizesType } from "./components/gov-form/group/constants";
import { FormInputSizesType, FormInputVariantType, InputType, Type } from "./components/gov-form/input/constants";
import { Nullable } from "./types/interfaces";
import { FormInputEvent } from "./components/gov-form/input/gov-form-input.types";
import { FormLabelSizesTypes } from "./components/gov-form/label/constants";
import { FormMessageVariantType } from "./components/gov-form/message/constants";
import { FormMultiselectSizesType, FormMultiselectVariantType } from "./components/gov-form/multiselect/constants";
import { FormMultiselectEvent, GovFormMultiSelectItem } from "./components/gov-form/multiselect/gov-form-multi-select.types";
import { FormRadioSizesType } from "./components/gov-form/radio/constants";
import { FormRadioEvent } from "./components/gov-form/radio/gov-form-radio.types";
import { FormSearchVariantType } from "./components/gov-form/search/constants";
import { FormSelectSizesType, FormSelectVariantType } from "./components/gov-form/select/constants";
import { FormSelectEvent, FormSelectOption } from "./components/gov-form/select/gov-form-select.types";
import { FormSwitchSizesType } from "./components/gov-form/switch/constants";
import { FormSwitchEvent } from "./components/gov-form/switch/gov-form-switch.types";
import { VariantType as VariantType1 } from "./components/gov-infobar/constants";
import { InfobarEvent } from "./components/gov-infobar/gov-infobar.types";
import { LayoutType, LayoutVariantType } from "./components/gov-layout/constants";
import { MessageVariantType } from "./components/gov-message/constants";
import { PaginationSizeType, PaginationType, PaginationVariantType } from "./components/gov-pagination/constants";
import { PaginationEvent } from "./components/gov-pagination/gov-pagination.types";
import { GovSideNavItemChangeEvent } from "./components/gov-side-nav/gov-side-nav-item.d";
import { SkeletonAnimationType, SkeletonShapesType, SkeletonVariantsType } from "./components/gov-loading/skeleton/constants";
import { SpacerBreakpointsType, SpacerSizeType } from "./components/gov-spacer/constants";
import { StatsBarIconPositionType, StatsBarVariantType } from "./components/gov-statsbar/constants";
import { StepperSizesType, StepperVariantType } from "./components/gov-stepper/constants";
import { GovStepperItemChangeEvent } from "./components/gov-stepper/gov-stepper-item.d";
import { TabOrientationType, TabType, VariantType as VariantType2 } from "./components/gov-tabs/constants";
import { ToastTypesType, ToastVariantType } from "./components/gov-toast/constants";
import { TooltipPositionType, TooltipSizeType, TooltipVariantType } from "./components/gov-tooltip/constants";
import { WizardSizesType, WizardVariantsType } from "./components/gov-wizard/constants";
import { GovWizardItemChangeEvent } from "./components/gov-wizard/gov-wizard-item.d";
import { WizardItemEvent } from "./components/gov-wizard/gov-wizard-item.types";
export { AccordionSizeType, AccordionVariantType } from "./components/gov-accordion/constants";
export { AccordionEvent, AccordionItemEvent } from "./components/gov-accordion/gov-accordion.types";
export { GovBreadcrumbsChangeEvent } from "./components/gov-breadcrumbs/gov-breadcrumbs.d";
export { ButtonSizesType, ButtonTargetType, ButtonVariantType, NativeTypesType, TypesType } from "./components/gov-button/button/constants";
export { ButtonEvent } from "./components/gov-button/button/gov-button.types";
export { GovCardChangeEvent } from "./components/gov-card/interfaces";
export { NativeTypesType as NativeTypesType1 } from "./components/gov-chip/constants";
export { ControlGroupVariantType } from "./components/gov-control-group/constants";
export { PositionType } from "./components/gov-button/dropdown/constants";
export { DropdownEvent } from "./components/gov-button/dropdown/gov-dropdown.types";
export { SizesType, VariantType } from "./components/gov-form/autocomplete/constants";
export { FormAutocompleteEvent, GovFormAutocompleteItem } from "./components/gov-form/autocomplete/gov-form-autocomplete.types";
export { FormCheckboxSizesType } from "./components/gov-form/checkbox/constants";
export { FormCheckboxEvent } from "./components/gov-form/checkbox/gov-form-checkbox.types";
export { FormControlSizesType } from "./components/gov-form/control/constants";
export { GovFormFileEvent } from "./components/gov-form/file/gov-form-file.types";
export { FormGroupOrientationType, FormGroupSizesType } from "./components/gov-form/group/constants";
export { FormInputSizesType, FormInputVariantType, InputType, Type } from "./components/gov-form/input/constants";
export { Nullable } from "./types/interfaces";
export { FormInputEvent } from "./components/gov-form/input/gov-form-input.types";
export { FormLabelSizesTypes } from "./components/gov-form/label/constants";
export { FormMessageVariantType } from "./components/gov-form/message/constants";
export { FormMultiselectSizesType, FormMultiselectVariantType } from "./components/gov-form/multiselect/constants";
export { FormMultiselectEvent, GovFormMultiSelectItem } from "./components/gov-form/multiselect/gov-form-multi-select.types";
export { FormRadioSizesType } from "./components/gov-form/radio/constants";
export { FormRadioEvent } from "./components/gov-form/radio/gov-form-radio.types";
export { FormSearchVariantType } from "./components/gov-form/search/constants";
export { FormSelectSizesType, FormSelectVariantType } from "./components/gov-form/select/constants";
export { FormSelectEvent, FormSelectOption } from "./components/gov-form/select/gov-form-select.types";
export { FormSwitchSizesType } from "./components/gov-form/switch/constants";
export { FormSwitchEvent } from "./components/gov-form/switch/gov-form-switch.types";
export { VariantType as VariantType1 } from "./components/gov-infobar/constants";
export { InfobarEvent } from "./components/gov-infobar/gov-infobar.types";
export { LayoutType, LayoutVariantType } from "./components/gov-layout/constants";
export { MessageVariantType } from "./components/gov-message/constants";
export { PaginationSizeType, PaginationType, PaginationVariantType } from "./components/gov-pagination/constants";
export { PaginationEvent } from "./components/gov-pagination/gov-pagination.types";
export { GovSideNavItemChangeEvent } from "./components/gov-side-nav/gov-side-nav-item.d";
export { SkeletonAnimationType, SkeletonShapesType, SkeletonVariantsType } from "./components/gov-loading/skeleton/constants";
export { SpacerBreakpointsType, SpacerSizeType } from "./components/gov-spacer/constants";
export { StatsBarIconPositionType, StatsBarVariantType } from "./components/gov-statsbar/constants";
export { StepperSizesType, StepperVariantType } from "./components/gov-stepper/constants";
export { GovStepperItemChangeEvent } from "./components/gov-stepper/gov-stepper-item.d";
export { TabOrientationType, TabType, VariantType as VariantType2 } from "./components/gov-tabs/constants";
export { ToastTypesType, ToastVariantType } from "./components/gov-toast/constants";
export { TooltipPositionType, TooltipSizeType, TooltipVariantType } from "./components/gov-tooltip/constants";
export { WizardSizesType, WizardVariantsType } from "./components/gov-wizard/constants";
export { GovWizardItemChangeEvent } from "./components/gov-wizard/gov-wizard-item.d";
export { WizardItemEvent } from "./components/gov-wizard/gov-wizard-item.types";
export namespace Components {
    interface GovAccordion {
        /**
          * Accordion item underline
         */
        "noBorder": boolean;
        /**
          * Accordion’s size.
         */
        "size"?: AccordionSizeType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the button.
         */
        "variant"?: AccordionVariantType;
        /**
          * Adds accessible label for the accordion that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovAccordionItem {
        /**
          * Closing the accordion
         */
        "close": () => Promise<void>;
        /**
          * Returns the current state of the component
         */
        "currentState": () => Promise<boolean>;
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Custom accordion item identifier. Otherwise, it will be generated
         */
        "identifier": string;
        /**
          * Defines whether the accordion is open or closed by button
         */
        "isExpanded": boolean;
        /**
          * Opening the accordion
         */
        "open": () => Promise<void>;
        /**
          * Accordion’s size.
         */
        "size"?: AccordionSizeType;
        /**
          * Accordion switch
         */
        "toggle": () => Promise<void>;
        /**
          * Style variation of the button.
         */
        "variant"?: AccordionVariantType;
    }
    interface GovAttachments {
        /**
          * Label of attachments section
         */
        "label": string;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the attachment section that is only shown for screen readers.
         */
        "wcagLabel": string;
    }
    interface GovAttachmentsItem {
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the remove button that is only shown for screen readers.
         */
        "wcagRemoveLabel": string;
        /**
          * Indicates the id of a component that labels the remove button.
         */
        "wcagRemoveLabelledBy": string;
    }
    interface GovBackdrop {
        /**
          * Determine if component should have inverse colors to be used on dark background.
         */
        "inverse": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the backdrop that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovBreadcrumbs {
        /**
          * Defines whether the components can be collapsible when element doesn't fit in one row.
         */
        "collapsible": boolean;
        /**
          * Defines whether the breadcrumbs are open or closed by button
         */
        "isExpanded": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the pagination that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * Indicates the id of a component that labels the pagination.
         */
        "wcagLabelledBy": string;
    }
    interface GovButton {
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies
         */
        "disabled": boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download": boolean;
        /**
          * Expands the button to fill 100% of the container width
         */
        "expanded": boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/focusable
         */
        "focusable": boolean;
        /**
          * Returns a clickable element instance
         */
        "getTriggerRef": () => Promise<HTMLLinkElement | HTMLButtonElement>;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href": string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-hreflang
         */
        "hreflang": string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconLeft"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconRight"?: string;
        /**
          * Custom button identifier
         */
        "identifier": string;
        /**
          * Determine if component should have inversed colors to be used on dark background
         */
        "inverse": boolean;
        /**
          * Indicates whether an asynchronous process is running
         */
        "loading": string;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute
         */
        "name": string;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type
         */
        "nativeType"?: NativeTypesType;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-referrerpolicy
         */
        "referrerpolicy": string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-rel
         */
        "rel": string;
        /**
          * Focus button element
         */
        "setFocus": () => Promise<void>;
        /**
          * Button’s size
         */
        "size"?: ButtonSizesType;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: ButtonTargetType;
        /**
          * Button's type
         */
        "type"?: TypesType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the button
         */
        "variant"?: ButtonVariantType;
        /**
          * Indicates the id of a related component’s visually focused element
         */
        "wcagActiveDescendant": string;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages
         */
        "wcagControls": string;
        /**
          * Indicates the current item within a container or set of related elements
         */
        "wcagCurrent": string;
        /**
          * Indicates the id of a component that describes the button
         */
        "wcagDescribedBy": string;
        /**
          * Aria description the button
         */
        "wcagDescription": string;
        /**
          * Details of the component
         */
        "wcagDetails": string;
        /**
          * If a button expands or collapses adjacent content, then use the ariaExpanded prop to add the aria-expanded attribute to the button Set the value to convey the current expanded (true) or collapsed (false) state of the content
         */
        "wcagExpanded": boolean;
        /**
          * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button
         */
        "wcagHasPopup": string;
        /**
          * Adds accessible label for the button that is only shown for screen readers Typically, this label text replaces the visible text on the button for users who use assistive technology
         */
        "wcagLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
        /**
          * Indicates the id of a component owned by the button
         */
        "wcagOwns": string;
        /**
          * Tells screen reader the element is pressed
         */
        "wcagPressed": string;
    }
    interface GovCard {
        /**
          * Close the card if it is collapsible
         */
        "close": () => Promise<void>;
        /**
          * Defines wether the card can be collapsible
         */
        "collapsible": boolean;
        /**
          * Defines whether the card is open or closed by button
         */
        "expanded": boolean;
        /**
          * Set height to 100% thus filling all vertical space.
         */
        "fullHeight": boolean;
        /**
          * Used to change the HMTL tag in the card headline for correct semantic structure
         */
        "headlineTag": string;
        /**
          * Item label of the card
         */
        "label": string;
        /**
          * Open the card if it is collapsible
         */
        "open": () => Promise<void>;
        /**
          * Style variation of the card.
         */
        "promotion": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the collapsible button that is only shown for screen readers.
         */
        "wcagTriggerLabel": string;
        /**
          * A string of identifiers that indicate alternative label elements for collapsible card
         */
        "wcagTriggerLabelledBy": string;
    }
    interface GovChip {
        /**
          * Makes the chip component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/focusable
         */
        "focusable": boolean;
        /**
          * Returns a unique tab trigger identifier
         */
        "getTriggerIdentifier": () => Promise<string>;
        /**
          * Returns a clickable element instance
         */
        "getTriggerRef": () => Promise<HTMLLinkElement | HTMLButtonElement | HTMLSpanElement>;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href": string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconLeft"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconRight"?: string;
        /**
          * Custom chip identifier. Otherwise, it will be generated
         */
        "identifier": string;
        /**
          * Determine if component should have inverse colors to be used on dark background
         */
        "inverse": boolean;
        /**
          * Focus button element
         */
        "setFocus": () => Promise<void>;
        /**
          * Chip’s size.
         */
        "size": ButtonSizesType;
        /**
          * Used to change the HTML tag in the chip
         */
        "tag": NativeTypesType1;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target": string;
        /**
          * Style variation of the chip.
         */
        "variant": ButtonVariantType;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages
         */
        "wcagControls": string;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "wcagLabel": string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected
         */
        "wcagSelected": boolean;
    }
    interface GovContainer {
        /**
          * Returns slotted children
          * @return
         */
        "slottedChildren": () => Promise<Node[]>;
    }
    interface GovControlGroup {
        /**
          * Specifies the display of the border between elements
         */
        "noBorder": boolean;
        /**
          * Style variation of the content message.
         */
        "variant": ControlGroupVariantType;
    }
    interface GovCookiebar {
    }
    interface GovDropdown {
        /**
          * Returns the current state of the dropdown
         */
        "getState": () => Promise<boolean>;
        /**
          * Dropdown open state
         */
        "open": boolean;
        /**
          * Menu display position
         */
        "position": PositionType;
        /**
          * Sets the dropdown state
         */
        "setOpen": (state: boolean) => Promise<void>;
    }
    interface GovEmpty {
    }
    interface GovErrorCode {
    }
    interface GovFormAutocomplete {
        /**
          * Clears whisperer value
         */
        "clearValue": () => Promise<void>;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Custom input identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Maximum length (number of characters) of value
         */
        "maxlength": number;
        /**
          * Custom message for when there is a blank sheet
         */
        "messageEmpty": string;
        /**
          * Custom message for when data is loaded
         */
        "messageLoading": string;
        /**
          * Minimum length (number of characters) of value
         */
        "minlength": number;
        /**
          * Name of the input.
         */
        "name": string;
        /**
          * Main key name in the object
         */
        "nameKey": string;
        /**
          * Text that appears in the form control when it has no value set
         */
        "placeholder": string;
        /**
          * The value is not editable
         */
        "readonly": boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Returns the current state of the component
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Set options for list
         */
        "setOptions": (options: GovFormAutocompleteItem[]) => Promise<void>;
        /**
          * Clears whisperer value
         */
        "setProcessing": (status: boolean) => Promise<void>;
        /**
          * Set a custom asynchronous function for the whisperer
         */
        "setSearchCallback": (callback: (value: string) => Promise<any>) => Promise<void>;
        /**
          * Setting a custom whisper result template
          * @param callback
         */
        "setTemplateResolver": (callback: (item: GovFormAutocompleteItem) => string) => Promise<void>;
        /**
          * Input’s size.
         */
        "size"?: SizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success": boolean;
        /**
          * Value of input
         */
        "value": string;
        /**
          * Style variation of the form input.
         */
        "variant"?: VariantType;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-owns
         */
        "wcagOwns": string;
    }
    interface GovFormCheckbox {
        /**
          * Checkbox button state
         */
        "checked": boolean;
        /**
          * Makes the checkbox component disabled. This prevents users from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Returns the reference of the native element
         */
        "getRef": () => Promise<HTMLInputElement>;
        /**
          * Custom checkbox identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Name of the checkbox.
         */
        "name": string;
        /**
          * When you can't use the form label.
         */
        "noLabel": boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Checkboxes size.
         */
        "size"?: FormCheckboxSizesType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Value of checkbox
         */
        "value": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
    }
    interface GovFormControl {
        /**
          * /**   Indicates the form element is disabled
         */
        "disabled": boolean;
        /**
          * Use control as a fieldset for better accessibility. Note: Don't forget to set the legend attribute of the gov-form-label component
         */
        "fieldset": boolean;
        /**
          * Defines the space between nested components.
         */
        "gap"?: FormControlSizesType;
        /**
          * Form element identifier
         */
        "identifier": string;
        /**
          * Indicates the entered value of child form element does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Form element size.
         */
        "size"?: FormControlSizesType;
        /**
          * /**   Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success": boolean;
    }
    interface GovFormFile {
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
         */
        "accept": string;
        /**
          * Description of the list of attachments
         */
        "attachmentsLabel": string;
        /**
          * Makes the File component disabled. This prevents users from being able to interact with the File, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Show list of attachments
         */
        "displayAttachments": boolean;
        /**
          * Insert unsupported file error message
         */
        "errorAccept": string;
        /**
          * Error message when the maximum file size is exceeded
         */
        "errorSize": string;
        /**
          * Expands the file input to fill 100% of the container width.
         */
        "expanded": boolean;
        /**
          * Returns the reference of the native area element
         */
        "getAreaRef": () => Promise<HTMLDivElement>;
        /**
          * Returns the reference of the native element
         */
        "getRef": () => Promise<HTMLInputElement>;
        /**
          * Custom File identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Maximum embedded file size
         */
        "maxFileSize": number;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple
         */
        "multiple": boolean;
        /**
          * Name of the input.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Remove all files from component state
         */
        "reset": () => Promise<void>;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the list of attachments.
         */
        "wcagAttachmentsLabel": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
        /**
          * Adds accessible label for the remove button that is only shown for screen readers.
         */
        "wcagRemoveLabel": string;
    }
    interface GovFormGroup {
        /**
          * Gap's size.
         */
        "gap"?: FormGroupSizesType;
        /**
          * Elements orientation
         */
        "orientation"?: FormGroupOrientationType;
    }
    interface GovFormInput {
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocomplete
         */
        "autocomplete": boolean;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocorrect
         */
        "autocorrect": boolean;
        /**
          * Clears input value
         */
        "clearValue": () => Promise<void>;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols
         */
        "cols": number;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Returns an instance of the native html input element
         */
        "getRef": () => Promise<HTMLInputElement>;
        /**
          * Custom input identifier.
         */
        "identifier": string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types
         */
        "inputType": InputType;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Maximum value that is acceptable and valid for the input containing the attribute
         */
        "max"?: string | number;
        /**
          * Maximum length (number of characters) of value
         */
        "maxlength": number;
        /**
          * Minimum value that is acceptable and valid for the input containing the attribute
         */
        "min"?: string | number;
        /**
          * Minimum length (number of characters) of value
         */
        "minlength": number;
        /**
          * Generates a texarea for the possibility of multiple lines
         */
        "multiline": boolean;
        /**
          * Name of the input.
         */
        "name": string;
        /**
          * Text that appears in the form control when it has no value set
         */
        "placeholder": string;
        /**
          * The value is not editable
         */
        "readonly": boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/input_role
         */
        "role": Nullable<string>;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows
         */
        "rows": number;
        /**
          * Returns the current state of the component
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Sets the ordered value of the element
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Input’s size.
         */
        "size"?: FormInputSizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success": boolean;
        /**
          * Defineds the visual style of input
         */
        "type"?: Type;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Value of input
         */
        "value": string;
        /**
          * Style variation of the form input.
         */
        "variant"?: FormInputVariantType;
        /**
          * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value.
         */
        "wcagAutocomplete": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Attribute is set on an element to indicate if a control is expanded or collapsed
         */
        "wcagExpanded": boolean;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagOwns": string;
    }
    interface GovFormLabel {
        /**
          * Identifier for label.
         */
        "identifier": string;
        /**
          * Use label as a legend for better accessibility. Note: Don't forget to set the fieldset attribute of the gov-form-control component
         */
        "legend": boolean;
        /**
          * Set whether the input is required or not.
         */
        "required": boolean;
        /**
          * Label's size.
         */
        "size"?: FormLabelSizesTypes;
    }
    interface GovFormMessage {
        /**
          * Returns unique identfiier of message
         */
        "identifier": () => Promise<string>;
        /**
          * Style variation of the message.
         */
        "variant"?: FormMessageVariantType;
    }
    interface GovFormMultiSelect {
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Returns an instance of the native html select element
         */
        "getRef": () => Promise<HTMLSelectElement>;
        /**
          * Returns a list of selected items
         */
        "getSelectedOptions": () => Promise<GovFormMultiSelectItem[]>;
        /**
          * Option to hide the list of selected items
         */
        "hideSelectedList": boolean;
        /**
          * Custom select identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Custom message for when there is a blank sheet
         */
        "messageEmpty": string;
        /**
          * Custom message for when data is loaded
         */
        "messageLoading": string;
        /**
          * Name of the select.
         */
        "name": string;
        /**
          * Custom select placeholder.
         */
        "placeholder": string;
        /**
          * To remove an option from the selected list
         */
        "removeSelectedOption": (option: GovFormMultiSelectItem, notify?: boolean) => Promise<void>;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Returns the current state of the component
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Setting a list of options to choose from
         */
        "setOptions": (options: GovFormMultiSelectItem[]) => Promise<void>;
        /**
          * Returns an instance of the native html select element
         */
        "setSelectedOption": (option: GovFormMultiSelectItem, notify?: boolean) => Promise<void>;
        /**
          * Setting the list of selected options
         */
        "setSelectedOptions": (options: GovFormMultiSelectItem[]) => Promise<void>;
        /**
          * Sets the ordered value of the element
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Select’s size.
         */
        "size"?: FormMultiselectSizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the form select.
         */
        "variant"?: FormMultiselectVariantType;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagOwns": string;
    }
    interface GovFormPasswordPower {
        /**
          * Password power: 0 - none, 1 - weak, 2 - medium, 3 - strong
         */
        "power": number;
    }
    interface GovFormRadio {
        /**
          * Radio button state
         */
        "checked": boolean;
        /**
          * Makes the radio component disabled. This prevents users from being able to interact with the radio, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Returns the reference of the native element
         */
        "getRef": () => Promise<HTMLInputElement>;
        /**
          * Custom radio identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Name of the radio.
         */
        "name": string;
        /**
          * When you can't use the form label.
         */
        "noLabel": boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Radio's size.
         */
        "size"?: FormRadioSizesType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Value of radio
         */
        "value": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
    }
    interface GovFormSearch {
        /**
          * Style variation of the form input.
         */
        "variant": FormSearchVariantType;
    }
    interface GovFormSelect {
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Returns an instance of the native html select element
         */
        "getRef": () => Promise<HTMLSelectElement>;
        /**
          * Custom select identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Name of the select.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Returns the current state of the component
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Sets the selection options
         */
        "setOptions": (options: FormSelectOption[]) => Promise<void>;
        /**
          * Sets the ordered value of the element
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Select’s size.
         */
        "size"?: FormSelectSizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Value of select
         */
        "value": string;
        /**
          * Style variation of the form select.
         */
        "variant"?: FormSelectVariantType;
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "wcagActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "wcagControls": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagOwns": string;
    }
    interface GovFormSwitch {
        /**
          * Switch button state
         */
        "checked": boolean;
        /**
          * Makes the switch component disabled. This prevents users from being able to interact with the switch, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Returns the reference of the native element
         */
        "getRef": () => Promise<HTMLInputElement>;
        /**
          * Custom switch identifier.
         */
        "identifier": string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid": boolean;
        /**
          * Name of the switch.
         */
        "name": string;
        /**
          * When you can't use the form label.
         */
        "noLabel": boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Switch's size.
         */
        "size"?: FormSwitchSizesType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Value of switch
         */
        "value": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy": string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy": string;
    }
    interface GovGrid {
        /**
          * Horizontal align of cells
         */
        "alignX": string;
        /**
          * Vertical align of cells
         */
        "alignY": string;
        /**
          * Size of horizontal gutter in the grid.
         */
        "gutterX": string;
        /**
          * Size of the vertical gutter in the grid.
         */
        "gutterY": string;
    }
    interface GovGridItem {
        /**
          * Cell size as a fraction of 1/12 of the grid size
         */
        "size": string;
        /**
          * Cell size for LG media query and up as a fraction of 12 of the grid size
         */
        "sizeLg": string;
        /**
          * Cell size for MD media query and up as a fraction of 12 of the grid size
         */
        "sizeMd": string;
        /**
          * Cell size for SM media query and up as a fraction of 12 of the grid size
         */
        "sizeSm": string;
        /**
          * Cell size for XL media query and up as a fraction of 12 of the grid size
         */
        "sizeXl": string;
    }
    interface GovIcon {
        /**
          * Name of icon
         */
        "name": string;
        /**
          * Type (folder) of icon
         */
        "type": string;
    }
    interface GovInfobar {
        /**
          * Displays the option to close the infobar
         */
        "closable"?: boolean;
        /**
          * Style variation of the button.
         */
        "headline": string;
        /**
          * Determine if component should have inverse colors to be used on dark background
         */
        "inverse": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the button.
         */
        "variant": VariantType1;
        /**
          * Aria label for the closing button. It is mandatory if the infobar is closable
         */
        "wcagCloseLabel": string;
        /**
          * Aria label for the toggle button. It is mandatory if the infobar has headline
         */
        "wcagToggleLabel": string;
    }
    interface GovLayout {
        /**
          * Determine if component should have inverse column order
         */
        "inverse": boolean;
        /**
          * Layout type
         */
        "type"?: LayoutType;
        /**
          * Layout align
         */
        "variant"?: LayoutVariantType;
    }
    interface GovLayoutColumn {
    }
    interface GovLoading {
    }
    interface GovMessage {
        /**
          * Style variation of the content message.
         */
        "variant": MessageVariantType;
    }
    interface GovModal {
        /**
          * Attribute allowing blocking the modal closing
         */
        "blockClose": boolean;
        /**
          * Hiding the modal
         */
        "hide": () => Promise<void>;
        /**
          * Title of modal window
         */
        "label": string;
        /**
          * Used to change the HTML tag in the modal label for correct semantic structure
         */
        "labelTag": string;
        /**
          * Attribute for modal window display
         */
        "open": boolean;
        /**
          * Role of modal
         */
        "role": Nullable<string>;
        /**
          * Showing the modal
         */
        "show": () => Promise<void>;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the modal close button that is only shown for screen readers.
         */
        "wcagCloseLabel": string;
        /**
          * A string of identifiers that indicate alternative label elements for closing the modal window
         */
        "wcagCloseLabelledBy": string;
        /**
          * Indicates the id of a component that describes the modal.
         */
        "wcagDescribedBy": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovNav {
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the accordion that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovNavDropdown {
    }
    interface GovNavItem {
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href": string;
    }
    interface GovPagination {
        /**
          * Currently displayed page
         */
        "current": number;
        /**
          * Set on active page
         */
        "inverse": boolean;
        /**
          * Setting a link to redirect to a given page. The {PAGE} wildcard can be used in the link to replace the page number. Note that in the case of paging through a link, it is always necessary to send to the component the current page where the user is.
         */
        "link": string;
        /**
          * Maximum pages displayed for selection
         */
        "maxPages": number;
        /**
          * Maximum number of entries per page
         */
        "pageSize": number;
        /**
          * Pagination's size
         */
        "size"?: PaginationSizeType;
        /**
          * Total count of entries
         */
        "total": number;
        /**
          * Pagination type
         */
        "type": PaginationType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the pagination.
         */
        "variant"?: PaginationVariantType;
        /**
          * Adds accessible label for the pagination that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * Indicates the id of a component that labels the pagination.
         */
        "wcagLabelledBy": string;
        /**
          * Adds accessible label for the page item
         */
        "wcagPageLabel": string;
        /**
          * Adds accessible label for the page select
         */
        "wcagSelectLabel": string;
    }
    interface GovPrompt {
        /**
          * Hiding the modal
         */
        "hide": () => Promise<void>;
        /**
          * Title of modal window
         */
        "label": string;
        /**
          * Used to change the HTML tag in the modal label for correct semantic structure
         */
        "labelTag": string;
        /**
          * Attribute for modal window display
         */
        "open": boolean;
        /**
          * Role of modal
         */
        "role": Nullable<string>;
        /**
          * Showing the modal
         */
        "show": () => Promise<void>;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the modal close button that is only shown for screen readers.
         */
        "wcagCloseLabel": string;
        /**
          * A string of identifiers that indicate alternative label elements for closing the modal window
         */
        "wcagCloseLabelledBy": string;
        /**
          * Indicates the id of a component that describes the modal.
         */
        "wcagDescribedBy": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovSideNav {
        /**
          * Determide if component should have compact styles.
         */
        "compact": boolean;
        /**
          * Determide if component should have inversed colors to be used on dark background.
         */
        "inverse": boolean;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the sidenav that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovSideNavItem {
        /**
          * Closing the sidenav
         */
        "close": () => Promise<void>;
        /**
          * Determide if component should have compact styles.
         */
        "compact": boolean;
        /**
          * Defined the count of nested items
         */
        "count": boolean;
        /**
          * Returns the current state of the component
         */
        "currentState": () => Promise<boolean>;
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href": string;
        /**
          * Custom sidenav item identifier. Otherwise, it will be generated
         */
        "identifier": string;
        /**
          * Determide if component should have inversed colors to be used on dark background
         */
        "inverse": boolean;
        /**
          * Defines whether the sidenav is open or closed by button
         */
        "isExpanded": boolean;
        /**
          * Item name of the sidenav
         */
        "label": string;
        /**
          * Opening the sidenav
         */
        "open": () => Promise<void>;
        /**
          * sidenav switch
         */
        "toggle": () => Promise<void>;
    }
    interface GovSkeleton {
        /**
          * Animation type
         */
        "animation"?: SkeletonAnimationType;
        /**
          * Number of rows of current skeleton type
         */
        "count": number;
        /**
          * Height of the skeleton ex. 100px, 100%, auto etc.
         */
        "height": string;
        /**
          * Shape of the skeleton
         */
        "shape"?: SkeletonShapesType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the skeleton.
         */
        "variant"?: SkeletonVariantsType;
        /**
          * Adds accessible label for the skeleton that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * Width of the skeleton ex. 100px, 100%, auto etc.
         */
        "width": string;
    }
    interface GovSpacer {
        /**
          * Breakpoint
         */
        "breakpoint"?: SpacerBreakpointsType;
        /**
          * Spacer’s size
         */
        "size"?: SpacerSizeType;
    }
    interface GovStatsbar {
        /**
          * Icon’s position
         */
        "iconPosition"?: StatsBarIconPositionType;
        /**
          * Style variation
         */
        "variant"?: StatsBarVariantType;
    }
    interface GovStatsbarItem {
        /**
          * Icon’s position
         */
        "iconPosition"?: StatsBarIconPositionType;
    }
    interface GovStepper {
        /**
          * Size of stepper
         */
        "size"?: StepperSizesType;
    }
    interface GovStepperItem {
        /**
          * Item annotation of the stepper
         */
        "annotation": string;
        /**
          * Returns the current state of the component
         */
        "currentState": () => Promise<boolean>;
        /**
          * Custom stepper item identifier. Otherwise, it will be generated
         */
        "identifier": string;
        /**
          * Item name of the stepper
         */
        "label": string;
        /**
          * Size of stepper
         */
        "size"?: StepperSizesType;
        /**
          * Used to change the HMTL tag in the stepper trigger for correct semantic structure
         */
        "triggerTag": string;
        /**
          * Style variation of the button.
         */
        "variant"?: StepperVariantType;
    }
    interface GovTabs {
        /**
          * Returns the currently selected tabs-item
         */
        "currentTab": () => Promise<Nullable<HTMLGovTabsItemElement>>;
        /**
          * Tabs orientation
         */
        "orientation": TabOrientationType;
        /**
          * Regenerate tabs controllers
         */
        "refresh": () => Promise<void>;
        /**
          * Regenerate tabs controllers
         */
        "setActiveTab": (identifier: string) => Promise<void>;
        /**
          * Tabs type
         */
        "type": TabType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Style variation of the tab chips.
         */
        "variant"?: VariantType2;
        /**
          * Adds accessible label for the tabs that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * Indicates the id of a component that labels the tabs.
         */
        "wcagLabelledBy": string;
        /**
          * Adds accessible label for the tabs select
         */
        "wcagSelectLabel": string;
    }
    interface GovTabsItem {
        /**
          * Default selected tab
         */
        "default": boolean;
        /**
          * Returns a unique tab content identifier
         */
        "getIdentifier": () => Promise<string>;
        /**
          * Returns a unique tab trigger identifier
         */
        "getTriggerIdentifier": () => Promise<string>;
        /**
          * Custom tab item identifier. Otherwise, it will be generated
         */
        "identifier": string;
        /**
          * Item name of the tab
         */
        "label": string;
        /**
          * Set status of tab-item
         */
        "setActiveStatus": (status: boolean) => Promise<void>;
        /**
          * Custom tab trigger item identifier. Otherwise, it will be generated
         */
        "triggerIdentifier": string;
    }
    interface GovTag {
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconLeft"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconRight"?: string;
        /**
          * Determine if component should have inverse colors to be used on dark background
         */
        "inverse": boolean;
        /**
          * Tag’s size.
         */
        "size": ButtonSizesType;
        /**
          * Style variation of the tag.
         */
        "variant": ButtonVariantType;
    }
    interface GovTile {
        /**
          * Returns a clickable element instance
         */
        "getTriggerRef": () => Promise<HTMLLinkElement | HTMLSpanElement>;
        /**
          * Link on whole tile
         */
        "href": string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: ButtonTargetType;
        /**
          * When set remove element masking making it interactive for the user.
         */
        "unmasked": boolean;
    }
    interface GovTiles {
        /**
          * Number of columns between 1-4
         */
        "columns": number;
        /**
          * Tiles border
         */
        "noBorder": boolean;
    }
    interface GovToast {
        /**
          * Closing button texting instead of icons
         */
        "closeLabel": string;
        /**
          * Remove toast from dom
         */
        "destroy": () => Promise<void>;
        /**
          * Toast’s gravity
         */
        "gravity": "top" | "bottom";
        /**
          * Toast’s position
         */
        "position": "left" | "center" | "right";
        /**
          * Number of milliseconds to wait before Toast disappear
         */
        "time": number;
        /**
          * Toast type
         */
        "type"?: ToastTypesType;
        /**
          * Style variation of the toast message.
         */
        "variant"?: ToastVariantType;
        /**
          * Aria label for the closing button. It is mandatory if the alert is closable
         */
        "wcagCloseLabel": string;
    }
    interface GovTooltip {
        /**
          * Hiding the modal
         */
        "hide": () => Promise<void>;
        /**
          * Trigger is just an icon
         */
        "icon": boolean;
        /**
          * Custom tooltip identifier.
         */
        "identifier": string;
        /**
          * Information contained in the tooltip
         */
        "message": string;
        /**
          * Tooltip display position
         */
        "position": TooltipPositionType;
        /**
          * Showing the modal
         */
        "show": () => Promise<void>;
        /**
          * Tooltip’s size.
         */
        "size"?: TooltipSizeType;
        /**
          * Style variation of the tooltip
         */
        "variant"?: TooltipVariantType;
    }
    interface GovTooltipContent {
        /**
          * Indicates display of tooltip content
         */
        "isVisible": boolean;
        /**
          * Indicates display of tooltip content
         */
        "parentId": string;
        /**
          * Tooltip is still visible.
         */
        "persist"?: boolean;
        /**
          * Tooltip’s size.
         */
        "size"?: TooltipSizeType;
        /**
          * Style variation of the tooltip
         */
        "variant"?: TooltipVariantType;
    }
    interface GovWizard {
        /**
          * Size of wizard
         */
        "size"?: WizardSizesType;
        /**
          * Validate the WCAG attributes of the component
         */
        "validateWcag": () => Promise<void>;
        /**
          * Adds accessible label for the wizard that is only shown for screen readers.
         */
        "wcagLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy": string;
    }
    interface GovWizardItem {
        /**
          * Item annotation of the wizard
         */
        "annotation": string;
        /**
          * Closing the Wizard
         */
        "close": () => Promise<void>;
        /**
          * Defines weather the wizard item can be collapsible
         */
        "collapsible": boolean;
        /**
          * Returns the current state of the component
         */
        "currentState": () => Promise<boolean>;
        /**
          * Makes the wizard component disabled.
         */
        "disabled": boolean;
        /**
          * Custom wizard item identifier. Otherwise, it will be generated
         */
        "identifier": string;
        /**
          * Defines whether the accordion is open or closed by button
         */
        "isExpanded": boolean;
        /**
          * Item label of the wizard
         */
        "label": string;
        /**
          * Used to change the HTML tag in the accordion trigger for correct semantic structure
         */
        "labelTag": string;
        /**
          * Opening the Wizard
         */
        "open": () => Promise<void>;
        /**
          * Size of wizard
         */
        "size"?: WizardSizesType;
        /**
          * Wizard switch
         */
        "toggle": () => Promise<void>;
        /**
          * Style variation of the button.
         */
        "variant"?: WizardVariantsType;
    }
}
export interface GovAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovAccordionElement;
}
export interface GovAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovAccordionItemElement;
}
export interface GovAttachmentsItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovAttachmentsItemElement;
}
export interface GovBackdropCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovBackdropElement;
}
export interface GovBreadcrumbsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovBreadcrumbsElement;
}
export interface GovButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovButtonElement;
}
export interface GovCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovCardElement;
}
export interface GovChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovChipElement;
}
export interface GovDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovDropdownElement;
}
export interface GovFormAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormAutocompleteElement;
}
export interface GovFormCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormCheckboxElement;
}
export interface GovFormFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormFileElement;
}
export interface GovFormInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormInputElement;
}
export interface GovFormLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormLabelElement;
}
export interface GovFormMultiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormMultiSelectElement;
}
export interface GovFormRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormRadioElement;
}
export interface GovFormSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormSelectElement;
}
export interface GovFormSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovFormSwitchElement;
}
export interface GovInfobarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovInfobarElement;
}
export interface GovModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovModalElement;
}
export interface GovPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovPaginationElement;
}
export interface GovPromptCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovPromptElement;
}
export interface GovSideNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovSideNavElement;
}
export interface GovSideNavItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovSideNavItemElement;
}
export interface GovStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovStepperElement;
}
export interface GovStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovStepperItemElement;
}
export interface GovTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovTabsElement;
}
export interface GovToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovToastElement;
}
export interface GovWizardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovWizardElement;
}
export interface GovWizardItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGovWizardItemElement;
}
declare global {
    interface HTMLGovAccordionElementEventMap {
        "gov-change": AccordionEvent;
    }
    interface HTMLGovAccordionElement extends Components.GovAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovAccordionElementEventMap>(type: K, listener: (this: HTMLGovAccordionElement, ev: GovAccordionCustomEvent<HTMLGovAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovAccordionElementEventMap>(type: K, listener: (this: HTMLGovAccordionElement, ev: GovAccordionCustomEvent<HTMLGovAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovAccordionElement: {
        prototype: HTMLGovAccordionElement;
        new (): HTMLGovAccordionElement;
    };
    interface HTMLGovAccordionItemElementEventMap {
        "gov-change": AccordionItemEvent;
    }
    interface HTMLGovAccordionItemElement extends Components.GovAccordionItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovAccordionItemElementEventMap>(type: K, listener: (this: HTMLGovAccordionItemElement, ev: GovAccordionItemCustomEvent<HTMLGovAccordionItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovAccordionItemElementEventMap>(type: K, listener: (this: HTMLGovAccordionItemElement, ev: GovAccordionItemCustomEvent<HTMLGovAccordionItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovAccordionItemElement: {
        prototype: HTMLGovAccordionItemElement;
        new (): HTMLGovAccordionItemElement;
    };
    interface HTMLGovAttachmentsElement extends Components.GovAttachments, HTMLStencilElement {
    }
    var HTMLGovAttachmentsElement: {
        prototype: HTMLGovAttachmentsElement;
        new (): HTMLGovAttachmentsElement;
    };
    interface HTMLGovAttachmentsItemElementEventMap {
        "gov-remove": PointerEvent;
    }
    interface HTMLGovAttachmentsItemElement extends Components.GovAttachmentsItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovAttachmentsItemElementEventMap>(type: K, listener: (this: HTMLGovAttachmentsItemElement, ev: GovAttachmentsItemCustomEvent<HTMLGovAttachmentsItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovAttachmentsItemElementEventMap>(type: K, listener: (this: HTMLGovAttachmentsItemElement, ev: GovAttachmentsItemCustomEvent<HTMLGovAttachmentsItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovAttachmentsItemElement: {
        prototype: HTMLGovAttachmentsItemElement;
        new (): HTMLGovAttachmentsItemElement;
    };
    interface HTMLGovBackdropElementEventMap {
        "gov-click": MouseEvent;
    }
    interface HTMLGovBackdropElement extends Components.GovBackdrop, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovBackdropElementEventMap>(type: K, listener: (this: HTMLGovBackdropElement, ev: GovBackdropCustomEvent<HTMLGovBackdropElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovBackdropElementEventMap>(type: K, listener: (this: HTMLGovBackdropElement, ev: GovBackdropCustomEvent<HTMLGovBackdropElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovBackdropElement: {
        prototype: HTMLGovBackdropElement;
        new (): HTMLGovBackdropElement;
    };
    interface HTMLGovBreadcrumbsElementEventMap {
        "gov-change": GovBreadcrumbsChangeEvent;
    }
    interface HTMLGovBreadcrumbsElement extends Components.GovBreadcrumbs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovBreadcrumbsElementEventMap>(type: K, listener: (this: HTMLGovBreadcrumbsElement, ev: GovBreadcrumbsCustomEvent<HTMLGovBreadcrumbsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovBreadcrumbsElementEventMap>(type: K, listener: (this: HTMLGovBreadcrumbsElement, ev: GovBreadcrumbsCustomEvent<HTMLGovBreadcrumbsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovBreadcrumbsElement: {
        prototype: HTMLGovBreadcrumbsElement;
        new (): HTMLGovBreadcrumbsElement;
    };
    interface HTMLGovButtonElementEventMap {
        "gov-click": ButtonEvent;
        "gov-focus": ButtonEvent;
        "gov-blur": ButtonEvent;
    }
    interface HTMLGovButtonElement extends Components.GovButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovButtonElementEventMap>(type: K, listener: (this: HTMLGovButtonElement, ev: GovButtonCustomEvent<HTMLGovButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovButtonElementEventMap>(type: K, listener: (this: HTMLGovButtonElement, ev: GovButtonCustomEvent<HTMLGovButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovButtonElement: {
        prototype: HTMLGovButtonElement;
        new (): HTMLGovButtonElement;
    };
    interface HTMLGovCardElementEventMap {
        "gov-toggle": GovCardChangeEvent;
    }
    interface HTMLGovCardElement extends Components.GovCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovCardElementEventMap>(type: K, listener: (this: HTMLGovCardElement, ev: GovCardCustomEvent<HTMLGovCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovCardElementEventMap>(type: K, listener: (this: HTMLGovCardElement, ev: GovCardCustomEvent<HTMLGovCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovCardElement: {
        prototype: HTMLGovCardElement;
        new (): HTMLGovCardElement;
    };
    interface HTMLGovChipElementEventMap {
        "gov-click": PointerEvent;
    }
    interface HTMLGovChipElement extends Components.GovChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovChipElementEventMap>(type: K, listener: (this: HTMLGovChipElement, ev: GovChipCustomEvent<HTMLGovChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovChipElementEventMap>(type: K, listener: (this: HTMLGovChipElement, ev: GovChipCustomEvent<HTMLGovChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovChipElement: {
        prototype: HTMLGovChipElement;
        new (): HTMLGovChipElement;
    };
    interface HTMLGovContainerElement extends Components.GovContainer, HTMLStencilElement {
    }
    var HTMLGovContainerElement: {
        prototype: HTMLGovContainerElement;
        new (): HTMLGovContainerElement;
    };
    interface HTMLGovControlGroupElement extends Components.GovControlGroup, HTMLStencilElement {
    }
    var HTMLGovControlGroupElement: {
        prototype: HTMLGovControlGroupElement;
        new (): HTMLGovControlGroupElement;
    };
    interface HTMLGovCookiebarElement extends Components.GovCookiebar, HTMLStencilElement {
    }
    var HTMLGovCookiebarElement: {
        prototype: HTMLGovCookiebarElement;
        new (): HTMLGovCookiebarElement;
    };
    interface HTMLGovDropdownElementEventMap {
        "gov-change": DropdownEvent;
    }
    interface HTMLGovDropdownElement extends Components.GovDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovDropdownElementEventMap>(type: K, listener: (this: HTMLGovDropdownElement, ev: GovDropdownCustomEvent<HTMLGovDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovDropdownElementEventMap>(type: K, listener: (this: HTMLGovDropdownElement, ev: GovDropdownCustomEvent<HTMLGovDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovDropdownElement: {
        prototype: HTMLGovDropdownElement;
        new (): HTMLGovDropdownElement;
    };
    interface HTMLGovEmptyElement extends Components.GovEmpty, HTMLStencilElement {
    }
    var HTMLGovEmptyElement: {
        prototype: HTMLGovEmptyElement;
        new (): HTMLGovEmptyElement;
    };
    interface HTMLGovErrorCodeElement extends Components.GovErrorCode, HTMLStencilElement {
    }
    var HTMLGovErrorCodeElement: {
        prototype: HTMLGovErrorCodeElement;
        new (): HTMLGovErrorCodeElement;
    };
    interface HTMLGovFormAutocompleteElementEventMap {
        "gov-focus": FormAutocompleteEvent;
        "gov-blur": FormAutocompleteEvent;
        "gov-input": FormAutocompleteEvent;
        "gov-select": FormAutocompleteEvent;
    }
    interface HTMLGovFormAutocompleteElement extends Components.GovFormAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormAutocompleteElementEventMap>(type: K, listener: (this: HTMLGovFormAutocompleteElement, ev: GovFormAutocompleteCustomEvent<HTMLGovFormAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormAutocompleteElementEventMap>(type: K, listener: (this: HTMLGovFormAutocompleteElement, ev: GovFormAutocompleteCustomEvent<HTMLGovFormAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormAutocompleteElement: {
        prototype: HTMLGovFormAutocompleteElement;
        new (): HTMLGovFormAutocompleteElement;
    };
    interface HTMLGovFormCheckboxElementEventMap {
        "gov-focus": FormCheckboxEvent;
        "gov-blur": FormCheckboxEvent;
        "gov-change": FormCheckboxEvent;
    }
    interface HTMLGovFormCheckboxElement extends Components.GovFormCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormCheckboxElementEventMap>(type: K, listener: (this: HTMLGovFormCheckboxElement, ev: GovFormCheckboxCustomEvent<HTMLGovFormCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormCheckboxElementEventMap>(type: K, listener: (this: HTMLGovFormCheckboxElement, ev: GovFormCheckboxCustomEvent<HTMLGovFormCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormCheckboxElement: {
        prototype: HTMLGovFormCheckboxElement;
        new (): HTMLGovFormCheckboxElement;
    };
    interface HTMLGovFormControlElement extends Components.GovFormControl, HTMLStencilElement {
    }
    var HTMLGovFormControlElement: {
        prototype: HTMLGovFormControlElement;
        new (): HTMLGovFormControlElement;
    };
    interface HTMLGovFormFileElementEventMap {
        "gov-focus": GovFormFileEvent;
        "gov-blur": GovFormFileEvent;
        "gov-files": GovFormFileEvent;
        "gov-add-file": GovFormFileEvent;
        "gov-remove-file": GovFormFileEvent;
    }
    interface HTMLGovFormFileElement extends Components.GovFormFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormFileElementEventMap>(type: K, listener: (this: HTMLGovFormFileElement, ev: GovFormFileCustomEvent<HTMLGovFormFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormFileElementEventMap>(type: K, listener: (this: HTMLGovFormFileElement, ev: GovFormFileCustomEvent<HTMLGovFormFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormFileElement: {
        prototype: HTMLGovFormFileElement;
        new (): HTMLGovFormFileElement;
    };
    interface HTMLGovFormGroupElement extends Components.GovFormGroup, HTMLStencilElement {
    }
    var HTMLGovFormGroupElement: {
        prototype: HTMLGovFormGroupElement;
        new (): HTMLGovFormGroupElement;
    };
    interface HTMLGovFormInputElementEventMap {
        "gov-focus": FormInputEvent;
        "gov-blur": FormInputEvent;
        "gov-input": FormInputEvent;
        "gov-keyup": FormInputEvent;
        "gov-keydown": FormInputEvent;
    }
    interface HTMLGovFormInputElement extends Components.GovFormInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormInputElementEventMap>(type: K, listener: (this: HTMLGovFormInputElement, ev: GovFormInputCustomEvent<HTMLGovFormInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormInputElementEventMap>(type: K, listener: (this: HTMLGovFormInputElement, ev: GovFormInputCustomEvent<HTMLGovFormInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormInputElement: {
        prototype: HTMLGovFormInputElement;
        new (): HTMLGovFormInputElement;
    };
    interface HTMLGovFormLabelElementEventMap {
        "gov-click": PointerEvent;
    }
    interface HTMLGovFormLabelElement extends Components.GovFormLabel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormLabelElementEventMap>(type: K, listener: (this: HTMLGovFormLabelElement, ev: GovFormLabelCustomEvent<HTMLGovFormLabelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormLabelElementEventMap>(type: K, listener: (this: HTMLGovFormLabelElement, ev: GovFormLabelCustomEvent<HTMLGovFormLabelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormLabelElement: {
        prototype: HTMLGovFormLabelElement;
        new (): HTMLGovFormLabelElement;
    };
    interface HTMLGovFormMessageElement extends Components.GovFormMessage, HTMLStencilElement {
    }
    var HTMLGovFormMessageElement: {
        prototype: HTMLGovFormMessageElement;
        new (): HTMLGovFormMessageElement;
    };
    interface HTMLGovFormMultiSelectElementEventMap {
        "gov-focus": FormMultiselectEvent;
        "gov-blur": FormMultiselectEvent;
        "gov-change": FormMultiselectEvent;
        "gov-select": FormMultiselectEvent;
        "gov-remove": FormMultiselectEvent;
    }
    interface HTMLGovFormMultiSelectElement extends Components.GovFormMultiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormMultiSelectElementEventMap>(type: K, listener: (this: HTMLGovFormMultiSelectElement, ev: GovFormMultiSelectCustomEvent<HTMLGovFormMultiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormMultiSelectElementEventMap>(type: K, listener: (this: HTMLGovFormMultiSelectElement, ev: GovFormMultiSelectCustomEvent<HTMLGovFormMultiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormMultiSelectElement: {
        prototype: HTMLGovFormMultiSelectElement;
        new (): HTMLGovFormMultiSelectElement;
    };
    interface HTMLGovFormPasswordPowerElement extends Components.GovFormPasswordPower, HTMLStencilElement {
    }
    var HTMLGovFormPasswordPowerElement: {
        prototype: HTMLGovFormPasswordPowerElement;
        new (): HTMLGovFormPasswordPowerElement;
    };
    interface HTMLGovFormRadioElementEventMap {
        "gov-focus": FormRadioEvent;
        "gov-blur": FormRadioEvent;
        "gov-change": FormRadioEvent;
    }
    interface HTMLGovFormRadioElement extends Components.GovFormRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormRadioElementEventMap>(type: K, listener: (this: HTMLGovFormRadioElement, ev: GovFormRadioCustomEvent<HTMLGovFormRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormRadioElementEventMap>(type: K, listener: (this: HTMLGovFormRadioElement, ev: GovFormRadioCustomEvent<HTMLGovFormRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormRadioElement: {
        prototype: HTMLGovFormRadioElement;
        new (): HTMLGovFormRadioElement;
    };
    interface HTMLGovFormSearchElement extends Components.GovFormSearch, HTMLStencilElement {
    }
    var HTMLGovFormSearchElement: {
        prototype: HTMLGovFormSearchElement;
        new (): HTMLGovFormSearchElement;
    };
    interface HTMLGovFormSelectElementEventMap {
        "gov-focus": FormSelectEvent;
        "gov-blur": FormSelectEvent;
        "gov-change": FormSelectEvent;
    }
    interface HTMLGovFormSelectElement extends Components.GovFormSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormSelectElementEventMap>(type: K, listener: (this: HTMLGovFormSelectElement, ev: GovFormSelectCustomEvent<HTMLGovFormSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormSelectElementEventMap>(type: K, listener: (this: HTMLGovFormSelectElement, ev: GovFormSelectCustomEvent<HTMLGovFormSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormSelectElement: {
        prototype: HTMLGovFormSelectElement;
        new (): HTMLGovFormSelectElement;
    };
    interface HTMLGovFormSwitchElementEventMap {
        "gov-focus": FormSwitchEvent;
        "gov-blur": FormSwitchEvent;
        "gov-change": FormSwitchEvent;
    }
    interface HTMLGovFormSwitchElement extends Components.GovFormSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovFormSwitchElementEventMap>(type: K, listener: (this: HTMLGovFormSwitchElement, ev: GovFormSwitchCustomEvent<HTMLGovFormSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovFormSwitchElementEventMap>(type: K, listener: (this: HTMLGovFormSwitchElement, ev: GovFormSwitchCustomEvent<HTMLGovFormSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovFormSwitchElement: {
        prototype: HTMLGovFormSwitchElement;
        new (): HTMLGovFormSwitchElement;
    };
    interface HTMLGovGridElement extends Components.GovGrid, HTMLStencilElement {
    }
    var HTMLGovGridElement: {
        prototype: HTMLGovGridElement;
        new (): HTMLGovGridElement;
    };
    interface HTMLGovGridItemElement extends Components.GovGridItem, HTMLStencilElement {
    }
    var HTMLGovGridItemElement: {
        prototype: HTMLGovGridItemElement;
        new (): HTMLGovGridItemElement;
    };
    interface HTMLGovIconElement extends Components.GovIcon, HTMLStencilElement {
    }
    var HTMLGovIconElement: {
        prototype: HTMLGovIconElement;
        new (): HTMLGovIconElement;
    };
    interface HTMLGovInfobarElementEventMap {
        "gov-close": InfobarEvent;
    }
    interface HTMLGovInfobarElement extends Components.GovInfobar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovInfobarElementEventMap>(type: K, listener: (this: HTMLGovInfobarElement, ev: GovInfobarCustomEvent<HTMLGovInfobarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovInfobarElementEventMap>(type: K, listener: (this: HTMLGovInfobarElement, ev: GovInfobarCustomEvent<HTMLGovInfobarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovInfobarElement: {
        prototype: HTMLGovInfobarElement;
        new (): HTMLGovInfobarElement;
    };
    interface HTMLGovLayoutElement extends Components.GovLayout, HTMLStencilElement {
    }
    var HTMLGovLayoutElement: {
        prototype: HTMLGovLayoutElement;
        new (): HTMLGovLayoutElement;
    };
    interface HTMLGovLayoutColumnElement extends Components.GovLayoutColumn, HTMLStencilElement {
    }
    var HTMLGovLayoutColumnElement: {
        prototype: HTMLGovLayoutColumnElement;
        new (): HTMLGovLayoutColumnElement;
    };
    interface HTMLGovLoadingElement extends Components.GovLoading, HTMLStencilElement {
    }
    var HTMLGovLoadingElement: {
        prototype: HTMLGovLoadingElement;
        new (): HTMLGovLoadingElement;
    };
    interface HTMLGovMessageElement extends Components.GovMessage, HTMLStencilElement {
    }
    var HTMLGovMessageElement: {
        prototype: HTMLGovMessageElement;
        new (): HTMLGovMessageElement;
    };
    interface HTMLGovModalElementEventMap {
        "gov-close": PointerEvent;
    }
    interface HTMLGovModalElement extends Components.GovModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovModalElementEventMap>(type: K, listener: (this: HTMLGovModalElement, ev: GovModalCustomEvent<HTMLGovModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovModalElementEventMap>(type: K, listener: (this: HTMLGovModalElement, ev: GovModalCustomEvent<HTMLGovModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovModalElement: {
        prototype: HTMLGovModalElement;
        new (): HTMLGovModalElement;
    };
    interface HTMLGovNavElement extends Components.GovNav, HTMLStencilElement {
    }
    var HTMLGovNavElement: {
        prototype: HTMLGovNavElement;
        new (): HTMLGovNavElement;
    };
    interface HTMLGovNavDropdownElement extends Components.GovNavDropdown, HTMLStencilElement {
    }
    var HTMLGovNavDropdownElement: {
        prototype: HTMLGovNavDropdownElement;
        new (): HTMLGovNavDropdownElement;
    };
    interface HTMLGovNavItemElement extends Components.GovNavItem, HTMLStencilElement {
    }
    var HTMLGovNavItemElement: {
        prototype: HTMLGovNavItemElement;
        new (): HTMLGovNavItemElement;
    };
    interface HTMLGovPaginationElementEventMap {
        "gov-page": PaginationEvent;
    }
    interface HTMLGovPaginationElement extends Components.GovPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovPaginationElementEventMap>(type: K, listener: (this: HTMLGovPaginationElement, ev: GovPaginationCustomEvent<HTMLGovPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovPaginationElementEventMap>(type: K, listener: (this: HTMLGovPaginationElement, ev: GovPaginationCustomEvent<HTMLGovPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovPaginationElement: {
        prototype: HTMLGovPaginationElement;
        new (): HTMLGovPaginationElement;
    };
    interface HTMLGovPromptElementEventMap {
        "gov-close": PointerEvent;
    }
    interface HTMLGovPromptElement extends Components.GovPrompt, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovPromptElementEventMap>(type: K, listener: (this: HTMLGovPromptElement, ev: GovPromptCustomEvent<HTMLGovPromptElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovPromptElementEventMap>(type: K, listener: (this: HTMLGovPromptElement, ev: GovPromptCustomEvent<HTMLGovPromptElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovPromptElement: {
        prototype: HTMLGovPromptElement;
        new (): HTMLGovPromptElement;
    };
    interface HTMLGovSideNavElementEventMap {
        "gov-change": GovSideNavItemChangeEvent;
    }
    interface HTMLGovSideNavElement extends Components.GovSideNav, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovSideNavElementEventMap>(type: K, listener: (this: HTMLGovSideNavElement, ev: GovSideNavCustomEvent<HTMLGovSideNavElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovSideNavElementEventMap>(type: K, listener: (this: HTMLGovSideNavElement, ev: GovSideNavCustomEvent<HTMLGovSideNavElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovSideNavElement: {
        prototype: HTMLGovSideNavElement;
        new (): HTMLGovSideNavElement;
    };
    interface HTMLGovSideNavItemElementEventMap {
        "gov-change": GovSideNavItemChangeEvent;
    }
    interface HTMLGovSideNavItemElement extends Components.GovSideNavItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovSideNavItemElementEventMap>(type: K, listener: (this: HTMLGovSideNavItemElement, ev: GovSideNavItemCustomEvent<HTMLGovSideNavItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovSideNavItemElementEventMap>(type: K, listener: (this: HTMLGovSideNavItemElement, ev: GovSideNavItemCustomEvent<HTMLGovSideNavItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovSideNavItemElement: {
        prototype: HTMLGovSideNavItemElement;
        new (): HTMLGovSideNavItemElement;
    };
    interface HTMLGovSkeletonElement extends Components.GovSkeleton, HTMLStencilElement {
    }
    var HTMLGovSkeletonElement: {
        prototype: HTMLGovSkeletonElement;
        new (): HTMLGovSkeletonElement;
    };
    interface HTMLGovSpacerElement extends Components.GovSpacer, HTMLStencilElement {
    }
    var HTMLGovSpacerElement: {
        prototype: HTMLGovSpacerElement;
        new (): HTMLGovSpacerElement;
    };
    interface HTMLGovStatsbarElement extends Components.GovStatsbar, HTMLStencilElement {
    }
    var HTMLGovStatsbarElement: {
        prototype: HTMLGovStatsbarElement;
        new (): HTMLGovStatsbarElement;
    };
    interface HTMLGovStatsbarItemElement extends Components.GovStatsbarItem, HTMLStencilElement {
    }
    var HTMLGovStatsbarItemElement: {
        prototype: HTMLGovStatsbarItemElement;
        new (): HTMLGovStatsbarItemElement;
    };
    interface HTMLGovStepperElementEventMap {
        "gov-change": GovStepperItemChangeEvent;
    }
    interface HTMLGovStepperElement extends Components.GovStepper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovStepperElementEventMap>(type: K, listener: (this: HTMLGovStepperElement, ev: GovStepperCustomEvent<HTMLGovStepperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovStepperElementEventMap>(type: K, listener: (this: HTMLGovStepperElement, ev: GovStepperCustomEvent<HTMLGovStepperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovStepperElement: {
        prototype: HTMLGovStepperElement;
        new (): HTMLGovStepperElement;
    };
    interface HTMLGovStepperItemElementEventMap {
        "gov-change": GovStepperItemChangeEvent;
    }
    interface HTMLGovStepperItemElement extends Components.GovStepperItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovStepperItemElementEventMap>(type: K, listener: (this: HTMLGovStepperItemElement, ev: GovStepperItemCustomEvent<HTMLGovStepperItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovStepperItemElementEventMap>(type: K, listener: (this: HTMLGovStepperItemElement, ev: GovStepperItemCustomEvent<HTMLGovStepperItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovStepperItemElement: {
        prototype: HTMLGovStepperItemElement;
        new (): HTMLGovStepperItemElement;
    };
    interface HTMLGovTabsElementEventMap {
        "gov-change": HTMLGovTabsItemElement;
    }
    interface HTMLGovTabsElement extends Components.GovTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovTabsElementEventMap>(type: K, listener: (this: HTMLGovTabsElement, ev: GovTabsCustomEvent<HTMLGovTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovTabsElementEventMap>(type: K, listener: (this: HTMLGovTabsElement, ev: GovTabsCustomEvent<HTMLGovTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovTabsElement: {
        prototype: HTMLGovTabsElement;
        new (): HTMLGovTabsElement;
    };
    interface HTMLGovTabsItemElement extends Components.GovTabsItem, HTMLStencilElement {
    }
    var HTMLGovTabsItemElement: {
        prototype: HTMLGovTabsItemElement;
        new (): HTMLGovTabsItemElement;
    };
    interface HTMLGovTagElement extends Components.GovTag, HTMLStencilElement {
    }
    var HTMLGovTagElement: {
        prototype: HTMLGovTagElement;
        new (): HTMLGovTagElement;
    };
    interface HTMLGovTileElement extends Components.GovTile, HTMLStencilElement {
    }
    var HTMLGovTileElement: {
        prototype: HTMLGovTileElement;
        new (): HTMLGovTileElement;
    };
    interface HTMLGovTilesElement extends Components.GovTiles, HTMLStencilElement {
    }
    var HTMLGovTilesElement: {
        prototype: HTMLGovTilesElement;
        new (): HTMLGovTilesElement;
    };
    interface HTMLGovToastElementEventMap {
        "gov-close": string;
    }
    interface HTMLGovToastElement extends Components.GovToast, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovToastElementEventMap>(type: K, listener: (this: HTMLGovToastElement, ev: GovToastCustomEvent<HTMLGovToastElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovToastElementEventMap>(type: K, listener: (this: HTMLGovToastElement, ev: GovToastCustomEvent<HTMLGovToastElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovToastElement: {
        prototype: HTMLGovToastElement;
        new (): HTMLGovToastElement;
    };
    interface HTMLGovTooltipElement extends Components.GovTooltip, HTMLStencilElement {
    }
    var HTMLGovTooltipElement: {
        prototype: HTMLGovTooltipElement;
        new (): HTMLGovTooltipElement;
    };
    interface HTMLGovTooltipContentElement extends Components.GovTooltipContent, HTMLStencilElement {
    }
    var HTMLGovTooltipContentElement: {
        prototype: HTMLGovTooltipContentElement;
        new (): HTMLGovTooltipContentElement;
    };
    interface HTMLGovWizardElementEventMap {
        "gov-change": GovWizardItemChangeEvent;
    }
    interface HTMLGovWizardElement extends Components.GovWizard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovWizardElementEventMap>(type: K, listener: (this: HTMLGovWizardElement, ev: GovWizardCustomEvent<HTMLGovWizardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovWizardElementEventMap>(type: K, listener: (this: HTMLGovWizardElement, ev: GovWizardCustomEvent<HTMLGovWizardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovWizardElement: {
        prototype: HTMLGovWizardElement;
        new (): HTMLGovWizardElement;
    };
    interface HTMLGovWizardItemElementEventMap {
        "gov-change": WizardItemEvent;
    }
    interface HTMLGovWizardItemElement extends Components.GovWizardItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGovWizardItemElementEventMap>(type: K, listener: (this: HTMLGovWizardItemElement, ev: GovWizardItemCustomEvent<HTMLGovWizardItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGovWizardItemElementEventMap>(type: K, listener: (this: HTMLGovWizardItemElement, ev: GovWizardItemCustomEvent<HTMLGovWizardItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGovWizardItemElement: {
        prototype: HTMLGovWizardItemElement;
        new (): HTMLGovWizardItemElement;
    };
    interface HTMLElementTagNameMap {
        "gov-accordion": HTMLGovAccordionElement;
        "gov-accordion-item": HTMLGovAccordionItemElement;
        "gov-attachments": HTMLGovAttachmentsElement;
        "gov-attachments-item": HTMLGovAttachmentsItemElement;
        "gov-backdrop": HTMLGovBackdropElement;
        "gov-breadcrumbs": HTMLGovBreadcrumbsElement;
        "gov-button": HTMLGovButtonElement;
        "gov-card": HTMLGovCardElement;
        "gov-chip": HTMLGovChipElement;
        "gov-container": HTMLGovContainerElement;
        "gov-control-group": HTMLGovControlGroupElement;
        "gov-cookiebar": HTMLGovCookiebarElement;
        "gov-dropdown": HTMLGovDropdownElement;
        "gov-empty": HTMLGovEmptyElement;
        "gov-error-code": HTMLGovErrorCodeElement;
        "gov-form-autocomplete": HTMLGovFormAutocompleteElement;
        "gov-form-checkbox": HTMLGovFormCheckboxElement;
        "gov-form-control": HTMLGovFormControlElement;
        "gov-form-file": HTMLGovFormFileElement;
        "gov-form-group": HTMLGovFormGroupElement;
        "gov-form-input": HTMLGovFormInputElement;
        "gov-form-label": HTMLGovFormLabelElement;
        "gov-form-message": HTMLGovFormMessageElement;
        "gov-form-multi-select": HTMLGovFormMultiSelectElement;
        "gov-form-password-power": HTMLGovFormPasswordPowerElement;
        "gov-form-radio": HTMLGovFormRadioElement;
        "gov-form-search": HTMLGovFormSearchElement;
        "gov-form-select": HTMLGovFormSelectElement;
        "gov-form-switch": HTMLGovFormSwitchElement;
        "gov-grid": HTMLGovGridElement;
        "gov-grid-item": HTMLGovGridItemElement;
        "gov-icon": HTMLGovIconElement;
        "gov-infobar": HTMLGovInfobarElement;
        "gov-layout": HTMLGovLayoutElement;
        "gov-layout-column": HTMLGovLayoutColumnElement;
        "gov-loading": HTMLGovLoadingElement;
        "gov-message": HTMLGovMessageElement;
        "gov-modal": HTMLGovModalElement;
        "gov-nav": HTMLGovNavElement;
        "gov-nav-dropdown": HTMLGovNavDropdownElement;
        "gov-nav-item": HTMLGovNavItemElement;
        "gov-pagination": HTMLGovPaginationElement;
        "gov-prompt": HTMLGovPromptElement;
        "gov-side-nav": HTMLGovSideNavElement;
        "gov-side-nav-item": HTMLGovSideNavItemElement;
        "gov-skeleton": HTMLGovSkeletonElement;
        "gov-spacer": HTMLGovSpacerElement;
        "gov-statsbar": HTMLGovStatsbarElement;
        "gov-statsbar-item": HTMLGovStatsbarItemElement;
        "gov-stepper": HTMLGovStepperElement;
        "gov-stepper-item": HTMLGovStepperItemElement;
        "gov-tabs": HTMLGovTabsElement;
        "gov-tabs-item": HTMLGovTabsItemElement;
        "gov-tag": HTMLGovTagElement;
        "gov-tile": HTMLGovTileElement;
        "gov-tiles": HTMLGovTilesElement;
        "gov-toast": HTMLGovToastElement;
        "gov-tooltip": HTMLGovTooltipElement;
        "gov-tooltip-content": HTMLGovTooltipContentElement;
        "gov-wizard": HTMLGovWizardElement;
        "gov-wizard-item": HTMLGovWizardItemElement;
    }
}
declare namespace LocalJSX {
    interface GovAccordion {
        /**
          * Accordion item underline
         */
        "noBorder"?: boolean;
        /**
          * Called when the accordion state changes
         */
        "onGov-change"?: (event: GovAccordionCustomEvent<AccordionEvent>) => void;
        /**
          * Accordion’s size.
         */
        "size"?: AccordionSizeType;
        /**
          * Style variation of the button.
         */
        "variant"?: AccordionVariantType;
        /**
          * Adds accessible label for the accordion that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovAccordionItem {
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom accordion item identifier. Otherwise, it will be generated
         */
        "identifier"?: string;
        /**
          * Defines whether the accordion is open or closed by button
         */
        "isExpanded"?: boolean;
        /**
          * Called when the accordion state changes
         */
        "onGov-change"?: (event: GovAccordionItemCustomEvent<AccordionItemEvent>) => void;
        /**
          * Accordion’s size.
         */
        "size"?: AccordionSizeType;
        /**
          * Style variation of the button.
         */
        "variant"?: AccordionVariantType;
    }
    interface GovAttachments {
        /**
          * Label of attachments section
         */
        "label"?: string;
        /**
          * Adds accessible label for the attachment section that is only shown for screen readers.
         */
        "wcagLabel"?: string;
    }
    interface GovAttachmentsItem {
        /**
          * Emitted when the file is removed
         */
        "onGov-remove"?: (event: GovAttachmentsItemCustomEvent<PointerEvent>) => void;
        /**
          * Adds accessible label for the remove button that is only shown for screen readers.
         */
        "wcagRemoveLabel"?: string;
        /**
          * Indicates the id of a component that labels the remove button.
         */
        "wcagRemoveLabelledBy"?: string;
    }
    interface GovBackdrop {
        /**
          * Determine if component should have inverse colors to be used on dark background.
         */
        "inverse"?: boolean;
        /**
          * Emitted when button clicks.
         */
        "onGov-click"?: (event: GovBackdropCustomEvent<MouseEvent>) => void;
        /**
          * Adds accessible label for the backdrop that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovBreadcrumbs {
        /**
          * Defines whether the components can be collapsible when element doesn't fit in one row.
         */
        "collapsible"?: boolean;
        /**
          * Defines whether the breadcrumbs are open or closed by button
         */
        "isExpanded"?: boolean;
        /**
          * Called when the Breadcrumbs state changes
         */
        "onGov-change"?: (event: GovBreadcrumbsCustomEvent<GovBreadcrumbsChangeEvent>) => void;
        /**
          * Adds accessible label for the pagination that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * Indicates the id of a component that labels the pagination.
         */
        "wcagLabelledBy"?: string;
    }
    interface GovButton {
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies
         */
        "disabled"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download
         */
        "download"?: boolean;
        /**
          * Expands the button to fill 100% of the container width
         */
        "expanded"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/focusable
         */
        "focusable"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href"?: string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-hreflang
         */
        "hreflang"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconLeft"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconRight"?: string;
        /**
          * Custom button identifier
         */
        "identifier"?: string;
        /**
          * Determine if component should have inversed colors to be used on dark background
         */
        "inverse"?: boolean;
        /**
          * Indicates whether an asynchronous process is running
         */
        "loading"?: string;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute
         */
        "name"?: string;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#attr-type
         */
        "nativeType"?: NativeTypesType;
        /**
          * Emitted when the button loses focus
         */
        "onGov-blur"?: (event: GovButtonCustomEvent<ButtonEvent>) => void;
        /**
          * Emitted when the button click
         */
        "onGov-click"?: (event: GovButtonCustomEvent<ButtonEvent>) => void;
        /**
          * Emitted when the button has focus
         */
        "onGov-focus"?: (event: GovButtonCustomEvent<ButtonEvent>) => void;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-referrerpolicy
         */
        "referrerpolicy"?: string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-rel
         */
        "rel"?: string;
        /**
          * Button’s size
         */
        "size"?: ButtonSizesType;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: ButtonTargetType;
        /**
          * Button's type
         */
        "type"?: TypesType;
        /**
          * Style variation of the button
         */
        "variant"?: ButtonVariantType;
        /**
          * Indicates the id of a related component’s visually focused element
         */
        "wcagActiveDescendant"?: string;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages
         */
        "wcagControls"?: string;
        /**
          * Indicates the current item within a container or set of related elements
         */
        "wcagCurrent"?: string;
        /**
          * Indicates the id of a component that describes the button
         */
        "wcagDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "wcagDescription"?: string;
        /**
          * Details of the component
         */
        "wcagDetails"?: string;
        /**
          * If a button expands or collapses adjacent content, then use the ariaExpanded prop to add the aria-expanded attribute to the button Set the value to convey the current expanded (true) or collapsed (false) state of the content
         */
        "wcagExpanded"?: boolean;
        /**
          * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button
         */
        "wcagHasPopup"?: string;
        /**
          * Adds accessible label for the button that is only shown for screen readers Typically, this label text replaces the visible text on the button for users who use assistive technology
         */
        "wcagLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the button
         */
        "wcagOwns"?: string;
        /**
          * Tells screen reader the element is pressed
         */
        "wcagPressed"?: string;
    }
    interface GovCard {
        /**
          * Defines wether the card can be collapsible
         */
        "collapsible"?: boolean;
        /**
          * Defines whether the card is open or closed by button
         */
        "expanded"?: boolean;
        /**
          * Set height to 100% thus filling all vertical space.
         */
        "fullHeight"?: boolean;
        /**
          * Used to change the HMTL tag in the card headline for correct semantic structure
         */
        "headlineTag"?: string;
        /**
          * Item label of the card
         */
        "label"?: string;
        /**
          * Called when the card toggle state changes
         */
        "onGov-toggle"?: (event: GovCardCustomEvent<GovCardChangeEvent>) => void;
        /**
          * Style variation of the card.
         */
        "promotion"?: boolean;
        /**
          * Adds accessible label for the collapsible button that is only shown for screen readers.
         */
        "wcagTriggerLabel"?: string;
        /**
          * A string of identifiers that indicate alternative label elements for collapsible card
         */
        "wcagTriggerLabelledBy"?: string;
    }
    interface GovChip {
        /**
          * Makes the chip component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/focusable
         */
        "focusable"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconLeft"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconRight"?: string;
        /**
          * Custom chip identifier. Otherwise, it will be generated
         */
        "identifier"?: string;
        /**
          * Determine if component should have inverse colors to be used on dark background
         */
        "inverse"?: boolean;
        /**
          * Emitted when the button click.
         */
        "onGov-click"?: (event: GovChipCustomEvent<PointerEvent>) => void;
        /**
          * Chip’s size.
         */
        "size"?: ButtonSizesType;
        /**
          * Used to change the HTML tag in the chip
         */
        "tag"?: NativeTypesType1;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: string;
        /**
          * Style variation of the chip.
         */
        "variant"?: ButtonVariantType;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages
         */
        "wcagControls"?: string;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "wcagLabel"?: string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-selected
         */
        "wcagSelected"?: boolean;
    }
    interface GovContainer {
    }
    interface GovControlGroup {
        /**
          * Specifies the display of the border between elements
         */
        "noBorder"?: boolean;
        /**
          * Style variation of the content message.
         */
        "variant"?: ControlGroupVariantType;
    }
    interface GovCookiebar {
    }
    interface GovDropdown {
        /**
          * Emitted when the dropdown change state
         */
        "onGov-change"?: (event: GovDropdownCustomEvent<DropdownEvent>) => void;
        /**
          * Dropdown open state
         */
        "open"?: boolean;
        /**
          * Menu display position
         */
        "position"?: PositionType;
    }
    interface GovEmpty {
    }
    interface GovErrorCode {
    }
    interface GovFormAutocomplete {
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom input identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Maximum length (number of characters) of value
         */
        "maxlength"?: number;
        /**
          * Custom message for when there is a blank sheet
         */
        "messageEmpty"?: string;
        /**
          * Custom message for when data is loaded
         */
        "messageLoading"?: string;
        /**
          * Minimum length (number of characters) of value
         */
        "minlength"?: number;
        /**
          * Name of the input.
         */
        "name"?: string;
        /**
          * Main key name in the object
         */
        "nameKey"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGov-blur"?: (event: GovFormAutocompleteCustomEvent<FormAutocompleteEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGov-focus"?: (event: GovFormAutocompleteCustomEvent<FormAutocompleteEvent>) => void;
        /**
          * Emitted when the input change value.
         */
        "onGov-input"?: (event: GovFormAutocompleteCustomEvent<FormAutocompleteEvent>) => void;
        /**
          * Emitted when the input change value.
         */
        "onGov-select"?: (event: GovFormAutocompleteCustomEvent<FormAutocompleteEvent>) => void;
        /**
          * Text that appears in the form control when it has no value set
         */
        "placeholder"?: string;
        /**
          * The value is not editable
         */
        "readonly"?: boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Input’s size.
         */
        "size"?: SizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success"?: boolean;
        /**
          * Value of input
         */
        "value"?: string;
        /**
          * Style variation of the form input.
         */
        "variant"?: VariantType;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-owns
         */
        "wcagOwns"?: string;
    }
    interface GovFormCheckbox {
        /**
          * Checkbox button state
         */
        "checked"?: boolean;
        /**
          * Makes the checkbox component disabled. This prevents users from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom checkbox identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Name of the checkbox.
         */
        "name"?: string;
        /**
          * When you can't use the form label.
         */
        "noLabel"?: boolean;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onGov-blur"?: (event: GovFormCheckboxCustomEvent<FormCheckboxEvent>) => void;
        /**
          * Emitted when the checkbox change value.
         */
        "onGov-change"?: (event: GovFormCheckboxCustomEvent<FormCheckboxEvent>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onGov-focus"?: (event: GovFormCheckboxCustomEvent<FormCheckboxEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Checkboxes size.
         */
        "size"?: FormCheckboxSizesType;
        /**
          * Value of checkbox
         */
        "value"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
    }
    interface GovFormControl {
        /**
          * /**   Indicates the form element is disabled
         */
        "disabled"?: boolean;
        /**
          * Use control as a fieldset for better accessibility. Note: Don't forget to set the legend attribute of the gov-form-label component
         */
        "fieldset"?: boolean;
        /**
          * Defines the space between nested components.
         */
        "gap"?: FormControlSizesType;
        /**
          * Form element identifier
         */
        "identifier"?: string;
        /**
          * Indicates the entered value of child form element does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Form element size.
         */
        "size"?: FormControlSizesType;
        /**
          * /**   Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success"?: boolean;
    }
    interface GovFormFile {
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept
         */
        "accept"?: string;
        /**
          * Description of the list of attachments
         */
        "attachmentsLabel"?: string;
        /**
          * Makes the File component disabled. This prevents users from being able to interact with the File, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Show list of attachments
         */
        "displayAttachments"?: boolean;
        /**
          * Insert unsupported file error message
         */
        "errorAccept"?: string;
        /**
          * Error message when the maximum file size is exceeded
         */
        "errorSize"?: string;
        /**
          * Expands the file input to fill 100% of the container width.
         */
        "expanded"?: boolean;
        /**
          * Custom File identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Maximum embedded file size
         */
        "maxFileSize"?: number;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple
         */
        "multiple"?: boolean;
        /**
          * Name of the input.
         */
        "name"?: string;
        /**
          * Called when a new file is added
         */
        "onGov-add-file"?: (event: GovFormFileCustomEvent<GovFormFileEvent>) => void;
        /**
          * Emitted when the File loses focus.
         */
        "onGov-blur"?: (event: GovFormFileCustomEvent<GovFormFileEvent>) => void;
        /**
          * Called when the list of inserted files is changed
         */
        "onGov-files"?: (event: GovFormFileCustomEvent<GovFormFileEvent>) => void;
        /**
          * Emitted when the File has focus.
         */
        "onGov-focus"?: (event: GovFormFileCustomEvent<GovFormFileEvent>) => void;
        /**
          * Called when a file is removed from the list
         */
        "onGov-remove-file"?: (event: GovFormFileCustomEvent<GovFormFileEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Adds accessible label for the list of attachments.
         */
        "wcagAttachmentsLabel"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
        /**
          * Adds accessible label for the remove button that is only shown for screen readers.
         */
        "wcagRemoveLabel"?: string;
    }
    interface GovFormGroup {
        /**
          * Gap's size.
         */
        "gap"?: FormGroupSizesType;
        /**
          * Elements orientation
         */
        "orientation"?: FormGroupOrientationType;
    }
    interface GovFormInput {
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocomplete
         */
        "autocomplete"?: boolean;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-autocorrect
         */
        "autocorrect"?: boolean;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-cols
         */
        "cols"?: number;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom input identifier.
         */
        "identifier"?: string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types
         */
        "inputType"?: InputType;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Maximum value that is acceptable and valid for the input containing the attribute
         */
        "max"?: string | number;
        /**
          * Maximum length (number of characters) of value
         */
        "maxlength"?: number;
        /**
          * Minimum value that is acceptable and valid for the input containing the attribute
         */
        "min"?: string | number;
        /**
          * Minimum length (number of characters) of value
         */
        "minlength"?: number;
        /**
          * Generates a texarea for the possibility of multiple lines
         */
        "multiline"?: boolean;
        /**
          * Name of the input.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onGov-blur"?: (event: GovFormInputCustomEvent<FormInputEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onGov-focus"?: (event: GovFormInputCustomEvent<FormInputEvent>) => void;
        /**
          * Emitted when the input change value.
         */
        "onGov-input"?: (event: GovFormInputCustomEvent<FormInputEvent>) => void;
        /**
          * Emitted when the input change value.
         */
        "onGov-keydown"?: (event: GovFormInputCustomEvent<FormInputEvent>) => void;
        /**
          * Emitted when the input change value.
         */
        "onGov-keyup"?: (event: GovFormInputCustomEvent<FormInputEvent>) => void;
        /**
          * Text that appears in the form control when it has no value set
         */
        "placeholder"?: string;
        /**
          * The value is not editable
         */
        "readonly"?: boolean;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/input_role
         */
        "role"?: Nullable<string>;
        /**
          * Same as original parameter https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea#attr-rows
         */
        "rows"?: number;
        /**
          * Input’s size.
         */
        "size"?: FormInputSizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success"?: boolean;
        /**
          * Defineds the visual style of input
         */
        "type"?: Type;
        /**
          * Value of input
         */
        "value"?: string;
        /**
          * Style variation of the form input.
         */
        "variant"?: FormInputVariantType;
        /**
          * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value.
         */
        "wcagAutocomplete"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Attribute is set on an element to indicate if a control is expanded or collapsed
         */
        "wcagExpanded"?: boolean;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagOwns"?: string;
    }
    interface GovFormLabel {
        /**
          * Identifier for label.
         */
        "identifier"?: string;
        /**
          * Use label as a legend for better accessibility. Note: Don't forget to set the fieldset attribute of the gov-form-control component
         */
        "legend"?: boolean;
        /**
          * Emitted when the label click.
         */
        "onGov-click"?: (event: GovFormLabelCustomEvent<PointerEvent>) => void;
        /**
          * Set whether the input is required or not.
         */
        "required"?: boolean;
        /**
          * Label's size.
         */
        "size"?: FormLabelSizesTypes;
    }
    interface GovFormMessage {
        /**
          * Style variation of the message.
         */
        "variant"?: FormMessageVariantType;
    }
    interface GovFormMultiSelect {
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Option to hide the list of selected items
         */
        "hideSelectedList"?: boolean;
        /**
          * Custom select identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Custom message for when there is a blank sheet
         */
        "messageEmpty"?: string;
        /**
          * Custom message for when data is loaded
         */
        "messageLoading"?: string;
        /**
          * Name of the select.
         */
        "name"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onGov-blur"?: (event: GovFormMultiSelectCustomEvent<FormMultiselectEvent>) => void;
        /**
          * Emitted when the select change value.
         */
        "onGov-change"?: (event: GovFormMultiSelectCustomEvent<FormMultiselectEvent>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onGov-focus"?: (event: GovFormMultiSelectCustomEvent<FormMultiselectEvent>) => void;
        /**
          * Emitted when an item is removed
         */
        "onGov-remove"?: (event: GovFormMultiSelectCustomEvent<FormMultiselectEvent>) => void;
        /**
          * Emitted when an item is selected
         */
        "onGov-select"?: (event: GovFormMultiSelectCustomEvent<FormMultiselectEvent>) => void;
        /**
          * Custom select placeholder.
         */
        "placeholder"?: string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Select’s size.
         */
        "size"?: FormMultiselectSizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success"?: boolean;
        /**
          * Style variation of the form select.
         */
        "variant"?: FormMultiselectVariantType;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagOwns"?: string;
    }
    interface GovFormPasswordPower {
        /**
          * Password power: 0 - none, 1 - weak, 2 - medium, 3 - strong
         */
        "power"?: number;
    }
    interface GovFormRadio {
        /**
          * Radio button state
         */
        "checked"?: boolean;
        /**
          * Makes the radio component disabled. This prevents users from being able to interact with the radio, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom radio identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Name of the radio.
         */
        "name"?: string;
        /**
          * When you can't use the form label.
         */
        "noLabel"?: boolean;
        /**
          * Emitted when the radio loses focus.
         */
        "onGov-blur"?: (event: GovFormRadioCustomEvent<FormRadioEvent>) => void;
        /**
          * Emitted when the radio change value.
         */
        "onGov-change"?: (event: GovFormRadioCustomEvent<FormRadioEvent>) => void;
        /**
          * Emitted when the radio has focus.
         */
        "onGov-focus"?: (event: GovFormRadioCustomEvent<FormRadioEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Radio's size.
         */
        "size"?: FormRadioSizesType;
        /**
          * Value of radio
         */
        "value"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
    }
    interface GovFormSearch {
        /**
          * Style variation of the form input.
         */
        "variant"?: FormSearchVariantType;
    }
    interface GovFormSelect {
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom select identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Name of the select.
         */
        "name"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onGov-blur"?: (event: GovFormSelectCustomEvent<FormSelectEvent>) => void;
        /**
          * Emitted when the select change value.
         */
        "onGov-change"?: (event: GovFormSelectCustomEvent<FormSelectEvent>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onGov-focus"?: (event: GovFormSelectCustomEvent<FormSelectEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Select’s size.
         */
        "size"?: FormSelectSizesType;
        /**
          * Indicates the entered value of child form element does conform to the format expected by the application.
         */
        "success"?: boolean;
        /**
          * Value of select
         */
        "value"?: string;
        /**
          * Style variation of the form select.
         */
        "variant"?: FormSelectVariantType;
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "wcagActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "wcagControls"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagOwns"?: string;
    }
    interface GovFormSwitch {
        /**
          * Switch button state
         */
        "checked"?: boolean;
        /**
          * Makes the switch component disabled. This prevents users from being able to interact with the switch, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Custom switch identifier.
         */
        "identifier"?: string;
        /**
          * Indicates the entered value does not conform to the format expected by the application.
         */
        "invalid"?: boolean;
        /**
          * Name of the switch.
         */
        "name"?: string;
        /**
          * When you can't use the form label.
         */
        "noLabel"?: boolean;
        /**
          * Emitted when the switch loses focus.
         */
        "onGov-blur"?: (event: GovFormSwitchCustomEvent<FormSwitchEvent>) => void;
        /**
          * Emitted when the switch change value.
         */
        "onGov-change"?: (event: GovFormSwitchCustomEvent<FormSwitchEvent>) => void;
        /**
          * Emitted when the switch has focus.
         */
        "onGov-focus"?: (event: GovFormSwitchCustomEvent<FormSwitchEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Switch's size.
         */
        "size"?: FormSwitchSizesType;
        /**
          * Value of switch
         */
        "value"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "wcagDescribedBy"?: string;
        /**
          * Indicates the id of a component that labels the input.
         */
        "wcagLabelledBy"?: string;
    }
    interface GovGrid {
        /**
          * Horizontal align of cells
         */
        "alignX"?: string;
        /**
          * Vertical align of cells
         */
        "alignY"?: string;
        /**
          * Size of horizontal gutter in the grid.
         */
        "gutterX"?: string;
        /**
          * Size of the vertical gutter in the grid.
         */
        "gutterY"?: string;
    }
    interface GovGridItem {
        /**
          * Cell size as a fraction of 1/12 of the grid size
         */
        "size"?: string;
        /**
          * Cell size for LG media query and up as a fraction of 12 of the grid size
         */
        "sizeLg"?: string;
        /**
          * Cell size for MD media query and up as a fraction of 12 of the grid size
         */
        "sizeMd"?: string;
        /**
          * Cell size for SM media query and up as a fraction of 12 of the grid size
         */
        "sizeSm"?: string;
        /**
          * Cell size for XL media query and up as a fraction of 12 of the grid size
         */
        "sizeXl"?: string;
    }
    interface GovIcon {
        /**
          * Name of icon
         */
        "name"?: string;
        /**
          * Type (folder) of icon
         */
        "type"?: string;
    }
    interface GovInfobar {
        /**
          * Displays the option to close the infobar
         */
        "closable"?: boolean;
        /**
          * Style variation of the button.
         */
        "headline"?: string;
        /**
          * Determine if component should have inverse colors to be used on dark background
         */
        "inverse"?: boolean;
        /**
          * Called when the close button is clicked
         */
        "onGov-close"?: (event: GovInfobarCustomEvent<InfobarEvent>) => void;
        /**
          * Style variation of the button.
         */
        "variant"?: VariantType1;
        /**
          * Aria label for the closing button. It is mandatory if the infobar is closable
         */
        "wcagCloseLabel"?: string;
        /**
          * Aria label for the toggle button. It is mandatory if the infobar has headline
         */
        "wcagToggleLabel"?: string;
    }
    interface GovLayout {
        /**
          * Determine if component should have inverse column order
         */
        "inverse"?: boolean;
        /**
          * Layout type
         */
        "type"?: LayoutType;
        /**
          * Layout align
         */
        "variant"?: LayoutVariantType;
    }
    interface GovLayoutColumn {
    }
    interface GovLoading {
    }
    interface GovMessage {
        /**
          * Style variation of the content message.
         */
        "variant"?: MessageVariantType;
    }
    interface GovModal {
        /**
          * Attribute allowing blocking the modal closing
         */
        "blockClose"?: boolean;
        /**
          * Title of modal window
         */
        "label"?: string;
        /**
          * Used to change the HTML tag in the modal label for correct semantic structure
         */
        "labelTag"?: string;
        /**
          * Emitted when modal window closes.
         */
        "onGov-close"?: (event: GovModalCustomEvent<PointerEvent>) => void;
        /**
          * Attribute for modal window display
         */
        "open"?: boolean;
        /**
          * Role of modal
         */
        "role"?: Nullable<string>;
        /**
          * Adds accessible label for the modal close button that is only shown for screen readers.
         */
        "wcagCloseLabel"?: string;
        /**
          * A string of identifiers that indicate alternative label elements for closing the modal window
         */
        "wcagCloseLabelledBy"?: string;
        /**
          * Indicates the id of a component that describes the modal.
         */
        "wcagDescribedBy"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovNav {
        /**
          * Adds accessible label for the accordion that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovNavDropdown {
    }
    interface GovNavItem {
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href"?: string;
    }
    interface GovPagination {
        /**
          * Currently displayed page
         */
        "current"?: number;
        /**
          * Set on active page
         */
        "inverse"?: boolean;
        /**
          * Setting a link to redirect to a given page. The {PAGE} wildcard can be used in the link to replace the page number. Note that in the case of paging through a link, it is always necessary to send to the component the current page where the user is.
         */
        "link"?: string;
        /**
          * Maximum pages displayed for selection
         */
        "maxPages"?: number;
        /**
          * Event called when changing the page with the current setting of the whole paging
         */
        "onGov-page"?: (event: GovPaginationCustomEvent<PaginationEvent>) => void;
        /**
          * Maximum number of entries per page
         */
        "pageSize"?: number;
        /**
          * Pagination's size
         */
        "size"?: PaginationSizeType;
        /**
          * Total count of entries
         */
        "total"?: number;
        /**
          * Pagination type
         */
        "type"?: PaginationType;
        /**
          * Style variation of the pagination.
         */
        "variant"?: PaginationVariantType;
        /**
          * Adds accessible label for the pagination that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * Indicates the id of a component that labels the pagination.
         */
        "wcagLabelledBy"?: string;
        /**
          * Adds accessible label for the page item
         */
        "wcagPageLabel"?: string;
        /**
          * Adds accessible label for the page select
         */
        "wcagSelectLabel"?: string;
    }
    interface GovPrompt {
        /**
          * Title of modal window
         */
        "label"?: string;
        /**
          * Used to change the HTML tag in the modal label for correct semantic structure
         */
        "labelTag"?: string;
        /**
          * Emitted when modal window closes.
         */
        "onGov-close"?: (event: GovPromptCustomEvent<PointerEvent>) => void;
        /**
          * Attribute for modal window display
         */
        "open"?: boolean;
        /**
          * Role of modal
         */
        "role"?: Nullable<string>;
        /**
          * Adds accessible label for the modal close button that is only shown for screen readers.
         */
        "wcagCloseLabel"?: string;
        /**
          * A string of identifiers that indicate alternative label elements for closing the modal window
         */
        "wcagCloseLabelledBy"?: string;
        /**
          * Indicates the id of a component that describes the modal.
         */
        "wcagDescribedBy"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovSideNav {
        /**
          * Determide if component should have compact styles.
         */
        "compact"?: boolean;
        /**
          * Determide if component should have inversed colors to be used on dark background.
         */
        "inverse"?: boolean;
        /**
          * Called when the sidenav state changes
         */
        "onGov-change"?: (event: GovSideNavCustomEvent<GovSideNavItemChangeEvent>) => void;
        /**
          * Adds accessible label for the sidenav that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovSideNavItem {
        /**
          * Determide if component should have compact styles.
         */
        "compact"?: boolean;
        /**
          * Defined the count of nested items
         */
        "count"?: boolean;
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href
         */
        "href"?: string;
        /**
          * Custom sidenav item identifier. Otherwise, it will be generated
         */
        "identifier"?: string;
        /**
          * Determide if component should have inversed colors to be used on dark background
         */
        "inverse"?: boolean;
        /**
          * Defines whether the sidenav is open or closed by button
         */
        "isExpanded"?: boolean;
        /**
          * Item name of the sidenav
         */
        "label"?: string;
        /**
          * Called when the sidenav state changes
         */
        "onGov-change"?: (event: GovSideNavItemCustomEvent<GovSideNavItemChangeEvent>) => void;
    }
    interface GovSkeleton {
        /**
          * Animation type
         */
        "animation"?: SkeletonAnimationType;
        /**
          * Number of rows of current skeleton type
         */
        "count"?: number;
        /**
          * Height of the skeleton ex. 100px, 100%, auto etc.
         */
        "height"?: string;
        /**
          * Shape of the skeleton
         */
        "shape"?: SkeletonShapesType;
        /**
          * Style variation of the skeleton.
         */
        "variant"?: SkeletonVariantsType;
        /**
          * Adds accessible label for the skeleton that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * Width of the skeleton ex. 100px, 100%, auto etc.
         */
        "width"?: string;
    }
    interface GovSpacer {
        /**
          * Breakpoint
         */
        "breakpoint"?: SpacerBreakpointsType;
        /**
          * Spacer’s size
         */
        "size"?: SpacerSizeType;
    }
    interface GovStatsbar {
        /**
          * Icon’s position
         */
        "iconPosition"?: StatsBarIconPositionType;
        /**
          * Style variation
         */
        "variant"?: StatsBarVariantType;
    }
    interface GovStatsbarItem {
        /**
          * Icon’s position
         */
        "iconPosition"?: StatsBarIconPositionType;
    }
    interface GovStepper {
        /**
          * Called when the Stepper state changes
         */
        "onGov-change"?: (event: GovStepperCustomEvent<GovStepperItemChangeEvent>) => void;
        /**
          * Size of stepper
         */
        "size"?: StepperSizesType;
    }
    interface GovStepperItem {
        /**
          * Item annotation of the stepper
         */
        "annotation"?: string;
        /**
          * Custom stepper item identifier. Otherwise, it will be generated
         */
        "identifier"?: string;
        /**
          * Item name of the stepper
         */
        "label"?: string;
        /**
          * Called when the accordion state changes
         */
        "onGov-change"?: (event: GovStepperItemCustomEvent<GovStepperItemChangeEvent>) => void;
        /**
          * Size of stepper
         */
        "size"?: StepperSizesType;
        /**
          * Used to change the HMTL tag in the stepper trigger for correct semantic structure
         */
        "triggerTag"?: string;
        /**
          * Style variation of the button.
         */
        "variant"?: StepperVariantType;
    }
    interface GovTabs {
        /**
          * Emitted when the tab is changed.
         */
        "onGov-change"?: (event: GovTabsCustomEvent<HTMLGovTabsItemElement>) => void;
        /**
          * Tabs orientation
         */
        "orientation"?: TabOrientationType;
        /**
          * Tabs type
         */
        "type"?: TabType;
        /**
          * Style variation of the tab chips.
         */
        "variant"?: VariantType2;
        /**
          * Adds accessible label for the tabs that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * Indicates the id of a component that labels the tabs.
         */
        "wcagLabelledBy"?: string;
        /**
          * Adds accessible label for the tabs select
         */
        "wcagSelectLabel"?: string;
    }
    interface GovTabsItem {
        /**
          * Default selected tab
         */
        "default"?: boolean;
        /**
          * Custom tab item identifier. Otherwise, it will be generated
         */
        "identifier"?: string;
        /**
          * Item name of the tab
         */
        "label"?: string;
        /**
          * Custom tab trigger item identifier. Otherwise, it will be generated
         */
        "triggerIdentifier"?: string;
    }
    interface GovTag {
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconLeft"?: string;
        /**
          * Definition of the button icon on the left. The icon must be defined in the form "type/name".
         */
        "iconRight"?: string;
        /**
          * Determine if component should have inverse colors to be used on dark background
         */
        "inverse"?: boolean;
        /**
          * Tag’s size.
         */
        "size"?: ButtonSizesType;
        /**
          * Style variation of the tag.
         */
        "variant"?: ButtonVariantType;
    }
    interface GovTile {
        /**
          * Link on whole tile
         */
        "href"?: string;
        /**
          * Same as original parameter
          * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-target
         */
        "target"?: ButtonTargetType;
        /**
          * When set remove element masking making it interactive for the user.
         */
        "unmasked"?: boolean;
    }
    interface GovTiles {
        /**
          * Number of columns between 1-4
         */
        "columns"?: number;
        /**
          * Tiles border
         */
        "noBorder"?: boolean;
    }
    interface GovToast {
        /**
          * Closing button texting instead of icons
         */
        "closeLabel"?: string;
        /**
          * Toast’s gravity
         */
        "gravity"?: "top" | "bottom";
        /**
          * Called when the close button is clicked
         */
        "onGov-close"?: (event: GovToastCustomEvent<string>) => void;
        /**
          * Toast’s position
         */
        "position"?: "left" | "center" | "right";
        /**
          * Number of milliseconds to wait before Toast disappear
         */
        "time"?: number;
        /**
          * Toast type
         */
        "type"?: ToastTypesType;
        /**
          * Style variation of the toast message.
         */
        "variant"?: ToastVariantType;
        /**
          * Aria label for the closing button. It is mandatory if the alert is closable
         */
        "wcagCloseLabel"?: string;
    }
    interface GovTooltip {
        /**
          * Trigger is just an icon
         */
        "icon"?: boolean;
        /**
          * Custom tooltip identifier.
         */
        "identifier"?: string;
        /**
          * Information contained in the tooltip
         */
        "message"?: string;
        /**
          * Tooltip display position
         */
        "position"?: TooltipPositionType;
        /**
          * Tooltip’s size.
         */
        "size"?: TooltipSizeType;
        /**
          * Style variation of the tooltip
         */
        "variant"?: TooltipVariantType;
    }
    interface GovTooltipContent {
        /**
          * Indicates display of tooltip content
         */
        "isVisible"?: boolean;
        /**
          * Indicates display of tooltip content
         */
        "parentId"?: string;
        /**
          * Tooltip is still visible.
         */
        "persist"?: boolean;
        /**
          * Tooltip’s size.
         */
        "size"?: TooltipSizeType;
        /**
          * Style variation of the tooltip
         */
        "variant"?: TooltipVariantType;
    }
    interface GovWizard {
        /**
          * Called when the wizard children state changes
         */
        "onGov-change"?: (event: GovWizardCustomEvent<GovWizardItemChangeEvent>) => void;
        /**
          * Size of wizard
         */
        "size"?: WizardSizesType;
        /**
          * Adds accessible label for the wizard that is only shown for screen readers.
         */
        "wcagLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "wcagLabelledBy"?: string;
    }
    interface GovWizardItem {
        /**
          * Item annotation of the wizard
         */
        "annotation"?: string;
        /**
          * Defines weather the wizard item can be collapsible
         */
        "collapsible"?: boolean;
        /**
          * Makes the wizard component disabled.
         */
        "disabled"?: boolean;
        /**
          * Custom wizard item identifier. Otherwise, it will be generated
         */
        "identifier"?: string;
        /**
          * Defines whether the accordion is open or closed by button
         */
        "isExpanded"?: boolean;
        /**
          * Item label of the wizard
         */
        "label"?: string;
        /**
          * Used to change the HTML tag in the accordion trigger for correct semantic structure
         */
        "labelTag"?: string;
        /**
          * Called when the accordion state changes
         */
        "onGov-change"?: (event: GovWizardItemCustomEvent<WizardItemEvent>) => void;
        /**
          * Size of wizard
         */
        "size"?: WizardSizesType;
        /**
          * Style variation of the button.
         */
        "variant"?: WizardVariantsType;
    }
    interface IntrinsicElements {
        "gov-accordion": GovAccordion;
        "gov-accordion-item": GovAccordionItem;
        "gov-attachments": GovAttachments;
        "gov-attachments-item": GovAttachmentsItem;
        "gov-backdrop": GovBackdrop;
        "gov-breadcrumbs": GovBreadcrumbs;
        "gov-button": GovButton;
        "gov-card": GovCard;
        "gov-chip": GovChip;
        "gov-container": GovContainer;
        "gov-control-group": GovControlGroup;
        "gov-cookiebar": GovCookiebar;
        "gov-dropdown": GovDropdown;
        "gov-empty": GovEmpty;
        "gov-error-code": GovErrorCode;
        "gov-form-autocomplete": GovFormAutocomplete;
        "gov-form-checkbox": GovFormCheckbox;
        "gov-form-control": GovFormControl;
        "gov-form-file": GovFormFile;
        "gov-form-group": GovFormGroup;
        "gov-form-input": GovFormInput;
        "gov-form-label": GovFormLabel;
        "gov-form-message": GovFormMessage;
        "gov-form-multi-select": GovFormMultiSelect;
        "gov-form-password-power": GovFormPasswordPower;
        "gov-form-radio": GovFormRadio;
        "gov-form-search": GovFormSearch;
        "gov-form-select": GovFormSelect;
        "gov-form-switch": GovFormSwitch;
        "gov-grid": GovGrid;
        "gov-grid-item": GovGridItem;
        "gov-icon": GovIcon;
        "gov-infobar": GovInfobar;
        "gov-layout": GovLayout;
        "gov-layout-column": GovLayoutColumn;
        "gov-loading": GovLoading;
        "gov-message": GovMessage;
        "gov-modal": GovModal;
        "gov-nav": GovNav;
        "gov-nav-dropdown": GovNavDropdown;
        "gov-nav-item": GovNavItem;
        "gov-pagination": GovPagination;
        "gov-prompt": GovPrompt;
        "gov-side-nav": GovSideNav;
        "gov-side-nav-item": GovSideNavItem;
        "gov-skeleton": GovSkeleton;
        "gov-spacer": GovSpacer;
        "gov-statsbar": GovStatsbar;
        "gov-statsbar-item": GovStatsbarItem;
        "gov-stepper": GovStepper;
        "gov-stepper-item": GovStepperItem;
        "gov-tabs": GovTabs;
        "gov-tabs-item": GovTabsItem;
        "gov-tag": GovTag;
        "gov-tile": GovTile;
        "gov-tiles": GovTiles;
        "gov-toast": GovToast;
        "gov-tooltip": GovTooltip;
        "gov-tooltip-content": GovTooltipContent;
        "gov-wizard": GovWizard;
        "gov-wizard-item": GovWizardItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gov-accordion": LocalJSX.GovAccordion & JSXBase.HTMLAttributes<HTMLGovAccordionElement>;
            "gov-accordion-item": LocalJSX.GovAccordionItem & JSXBase.HTMLAttributes<HTMLGovAccordionItemElement>;
            "gov-attachments": LocalJSX.GovAttachments & JSXBase.HTMLAttributes<HTMLGovAttachmentsElement>;
            "gov-attachments-item": LocalJSX.GovAttachmentsItem & JSXBase.HTMLAttributes<HTMLGovAttachmentsItemElement>;
            "gov-backdrop": LocalJSX.GovBackdrop & JSXBase.HTMLAttributes<HTMLGovBackdropElement>;
            "gov-breadcrumbs": LocalJSX.GovBreadcrumbs & JSXBase.HTMLAttributes<HTMLGovBreadcrumbsElement>;
            "gov-button": LocalJSX.GovButton & JSXBase.HTMLAttributes<HTMLGovButtonElement>;
            "gov-card": LocalJSX.GovCard & JSXBase.HTMLAttributes<HTMLGovCardElement>;
            "gov-chip": LocalJSX.GovChip & JSXBase.HTMLAttributes<HTMLGovChipElement>;
            "gov-container": LocalJSX.GovContainer & JSXBase.HTMLAttributes<HTMLGovContainerElement>;
            "gov-control-group": LocalJSX.GovControlGroup & JSXBase.HTMLAttributes<HTMLGovControlGroupElement>;
            "gov-cookiebar": LocalJSX.GovCookiebar & JSXBase.HTMLAttributes<HTMLGovCookiebarElement>;
            "gov-dropdown": LocalJSX.GovDropdown & JSXBase.HTMLAttributes<HTMLGovDropdownElement>;
            "gov-empty": LocalJSX.GovEmpty & JSXBase.HTMLAttributes<HTMLGovEmptyElement>;
            "gov-error-code": LocalJSX.GovErrorCode & JSXBase.HTMLAttributes<HTMLGovErrorCodeElement>;
            "gov-form-autocomplete": LocalJSX.GovFormAutocomplete & JSXBase.HTMLAttributes<HTMLGovFormAutocompleteElement>;
            "gov-form-checkbox": LocalJSX.GovFormCheckbox & JSXBase.HTMLAttributes<HTMLGovFormCheckboxElement>;
            "gov-form-control": LocalJSX.GovFormControl & JSXBase.HTMLAttributes<HTMLGovFormControlElement>;
            "gov-form-file": LocalJSX.GovFormFile & JSXBase.HTMLAttributes<HTMLGovFormFileElement>;
            "gov-form-group": LocalJSX.GovFormGroup & JSXBase.HTMLAttributes<HTMLGovFormGroupElement>;
            "gov-form-input": LocalJSX.GovFormInput & JSXBase.HTMLAttributes<HTMLGovFormInputElement>;
            "gov-form-label": LocalJSX.GovFormLabel & JSXBase.HTMLAttributes<HTMLGovFormLabelElement>;
            "gov-form-message": LocalJSX.GovFormMessage & JSXBase.HTMLAttributes<HTMLGovFormMessageElement>;
            "gov-form-multi-select": LocalJSX.GovFormMultiSelect & JSXBase.HTMLAttributes<HTMLGovFormMultiSelectElement>;
            "gov-form-password-power": LocalJSX.GovFormPasswordPower & JSXBase.HTMLAttributes<HTMLGovFormPasswordPowerElement>;
            "gov-form-radio": LocalJSX.GovFormRadio & JSXBase.HTMLAttributes<HTMLGovFormRadioElement>;
            "gov-form-search": LocalJSX.GovFormSearch & JSXBase.HTMLAttributes<HTMLGovFormSearchElement>;
            "gov-form-select": LocalJSX.GovFormSelect & JSXBase.HTMLAttributes<HTMLGovFormSelectElement>;
            "gov-form-switch": LocalJSX.GovFormSwitch & JSXBase.HTMLAttributes<HTMLGovFormSwitchElement>;
            "gov-grid": LocalJSX.GovGrid & JSXBase.HTMLAttributes<HTMLGovGridElement>;
            "gov-grid-item": LocalJSX.GovGridItem & JSXBase.HTMLAttributes<HTMLGovGridItemElement>;
            "gov-icon": LocalJSX.GovIcon & JSXBase.HTMLAttributes<HTMLGovIconElement>;
            "gov-infobar": LocalJSX.GovInfobar & JSXBase.HTMLAttributes<HTMLGovInfobarElement>;
            "gov-layout": LocalJSX.GovLayout & JSXBase.HTMLAttributes<HTMLGovLayoutElement>;
            "gov-layout-column": LocalJSX.GovLayoutColumn & JSXBase.HTMLAttributes<HTMLGovLayoutColumnElement>;
            "gov-loading": LocalJSX.GovLoading & JSXBase.HTMLAttributes<HTMLGovLoadingElement>;
            "gov-message": LocalJSX.GovMessage & JSXBase.HTMLAttributes<HTMLGovMessageElement>;
            "gov-modal": LocalJSX.GovModal & JSXBase.HTMLAttributes<HTMLGovModalElement>;
            "gov-nav": LocalJSX.GovNav & JSXBase.HTMLAttributes<HTMLGovNavElement>;
            "gov-nav-dropdown": LocalJSX.GovNavDropdown & JSXBase.HTMLAttributes<HTMLGovNavDropdownElement>;
            "gov-nav-item": LocalJSX.GovNavItem & JSXBase.HTMLAttributes<HTMLGovNavItemElement>;
            "gov-pagination": LocalJSX.GovPagination & JSXBase.HTMLAttributes<HTMLGovPaginationElement>;
            "gov-prompt": LocalJSX.GovPrompt & JSXBase.HTMLAttributes<HTMLGovPromptElement>;
            "gov-side-nav": LocalJSX.GovSideNav & JSXBase.HTMLAttributes<HTMLGovSideNavElement>;
            "gov-side-nav-item": LocalJSX.GovSideNavItem & JSXBase.HTMLAttributes<HTMLGovSideNavItemElement>;
            "gov-skeleton": LocalJSX.GovSkeleton & JSXBase.HTMLAttributes<HTMLGovSkeletonElement>;
            "gov-spacer": LocalJSX.GovSpacer & JSXBase.HTMLAttributes<HTMLGovSpacerElement>;
            "gov-statsbar": LocalJSX.GovStatsbar & JSXBase.HTMLAttributes<HTMLGovStatsbarElement>;
            "gov-statsbar-item": LocalJSX.GovStatsbarItem & JSXBase.HTMLAttributes<HTMLGovStatsbarItemElement>;
            "gov-stepper": LocalJSX.GovStepper & JSXBase.HTMLAttributes<HTMLGovStepperElement>;
            "gov-stepper-item": LocalJSX.GovStepperItem & JSXBase.HTMLAttributes<HTMLGovStepperItemElement>;
            "gov-tabs": LocalJSX.GovTabs & JSXBase.HTMLAttributes<HTMLGovTabsElement>;
            "gov-tabs-item": LocalJSX.GovTabsItem & JSXBase.HTMLAttributes<HTMLGovTabsItemElement>;
            "gov-tag": LocalJSX.GovTag & JSXBase.HTMLAttributes<HTMLGovTagElement>;
            "gov-tile": LocalJSX.GovTile & JSXBase.HTMLAttributes<HTMLGovTileElement>;
            "gov-tiles": LocalJSX.GovTiles & JSXBase.HTMLAttributes<HTMLGovTilesElement>;
            "gov-toast": LocalJSX.GovToast & JSXBase.HTMLAttributes<HTMLGovToastElement>;
            "gov-tooltip": LocalJSX.GovTooltip & JSXBase.HTMLAttributes<HTMLGovTooltipElement>;
            "gov-tooltip-content": LocalJSX.GovTooltipContent & JSXBase.HTMLAttributes<HTMLGovTooltipContentElement>;
            "gov-wizard": LocalJSX.GovWizard & JSXBase.HTMLAttributes<HTMLGovWizardElement>;
            "gov-wizard-item": LocalJSX.GovWizardItem & JSXBase.HTMLAttributes<HTMLGovWizardItemElement>;
        }
    }
}

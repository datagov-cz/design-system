/*
 *   Input & Textarea & Select Shared Definitions
 */

%form-input-core {
	@include base(flex);
	align-items: center;
	.element {
		position: relative;
		display: flex;
		flex: 1 1 auto;
	}
	input,
	select,
	textarea {
		@include focus-outline();
		width: 100%;
		border-radius: $border-radius;
		background-color: $form-bg-color;
		font-family: $font-family-primary;
		&::placeholder {
			color: $form-placeholder-color;
		}
	}
	textarea {
		@include typography($font-size-m);
		padding: $form-textarea-padding;
		resize: none;
	}
	*[slot="left-icon"],
	*[slot="right-icon"] {
		position: absolute;
		top: 50%;
		display: flex;
		justify-content: center;
		transform: translateY(-50%);
		pointer-events: none;
	}
	*[slot="left-icon"] {
		left: 0;
	}
	*[slot="right-icon"] {
		right: 0;
	}
	*[slot="prefix"],
	*[slot="sufix"] {
		margin: 0;
	}

	// VARIANTS
	@each $size, $definitions in $form-input-core-sizes {
		&[size="#{$size}"] {
			@include typography(get("font", $definitions));
			gap: rem-calc(8) get("icon-size", $definitions);
			input,
			select {
				@include typography(get("font", $definitions));
				height: get("height", $definitions);
				padding: get("padding", $definitions);
			}
			*[slot="left-icon"],
			*[slot="right-icon"] {
				width: get("icon-size", $definitions);
				height: get("icon-size", $definitions);
			}
			*[slot="left-icon"] {
				left: calc((get("icon-padding", $definitions) - get("icon-size", $definitions)) / 2);
				& ~ input {
					padding-left: get("icon-padding", $definitions);
				}
			}
			*[slot="right-icon"] {
				right: calc((get("icon-padding", $definitions) - get("icon-size", $definitions)) / 2);
				& ~ input,
				& ~ select {
					padding-right: get("icon-padding", $definitions);
				}
			}
		}
	}

	@each $variant, $definitions in $form-input-core-variants {
		&[variant="#{$variant}"] {
			input,
			select,
			textarea {
				color: get("color", $definitions);
				border: get("border", $definitions);
			}
			*[slot="left-icon"],
			*[slot="right-icon"]:not(.icon-arrow) {
				color: get("icon-color", $definitions);
			}
		}
	}

	// STATES
	@include parameter("disabled") {
		pointer-events: none;
		input,
		select,
		textarea {
			border-color: $form-state-color-disabled;
			background: $form-state-bg-input-disabled;
			color: $form-state-color-disabled;
		}
		*[slot="left-icon"],
		*[slot="right-icon"] {
			color: $form-state-color-disabled !important;
		}
	}
	@include parameter("invalid") {
		input,
		select,
		textarea {
			border-color: $form-state-color-error;
			color: $form-state-color-error;
			&::placeholder {
				color: $form-state-color-error-placeholder;
			}
		}
		*[slot="left-icon"],
		*[slot="right-icon"] {
			color: $form-state-color-error !important;
		}
		*[slot="right-icon"]:not(.icon-validation):not(.icon-arrow) {
			display: none;
		}
	}
	@include parameter("success") {
		*[slot="right-icon"]:not(.icon-arrow) {
			color: $form-state-color-success;
		}
		*[slot="right-icon"]:not(.icon-validation):not(.icon-arrow) {
			display: none;
		}
	}
	@include parameter("multiline") {
		*[slot="left-icon"],
		*[slot="right-icon"] {
			display: none;
		}
	}
}
